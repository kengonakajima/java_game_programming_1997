正規表現クラス・ライブラリ "pat" の紹介

このクラスライブラリには、以下のクラスが含まれています。

AddToEnd.class
Any.class
Backup.class
BadMultiArgs.class
BadRangeArgs.class
Boundary.class
Bracket.class
End.class
Goop.class
Group.class
Multi.class
MultiMin.class
Multi_stage2.class
Or.class
OrMark.class
Pattern.class
Pthings.class
Range.class
RegRes.class
RegSyntax.class
Regex.class
RegexTokenizer.class
Rthings.class
Start.class
StrPos.class
SubMark.class
lookAhead.class
oneChar.class
patInf.class
patInt.class
suitcase.class

これらのクラス全部を、patという名前のディレクトリに入れて、
そのディレクトリの親ディレクトリにCLASSPATHを通しておけば、


------------------------------

import pat.Regex;

public class tstRegex {
	public static void main(String[] notused) {
		Regex r = new Regex("[a-c]+([x-z]+)");
		r.search("abcxyz");
		System.out.println("match => "+r.substring());
		System.out.println("backrefernce 0 => "+r.substring(0));
	}
}

------------------------------

以上のようなプログラムを書いてコンパイルすることにより、javaでも
正規表現を使うことができます。正規表現とは、大きな文字列の塊の中
から、望みの文字列のパターンを見つけだすために使われるパターンの
表現の方法のことで、プログラムによるテキスト処理の場面では非常
によく使われるものです。正規表現ライブラリが中核となっている言語
には、有名なものとしてperlやシェルスクリプト、awk,sedなどがあり
ます。正規表現はそれぞれの言語実装系によって少しづつ異なっています
が、クラスライブラリpatは、その中でもperl version5の正規表現
に準拠しています。正規表現の詳しい内容をここで説明することは無理が
ありますので、perlの入門書などを参考にしてください。

  上に挙げたサンプルプログラムは、まず、求めているパターンをあら
わす正規表現を引数として、Regexクラスのインスタンス r を作ります。

Regex r = new Regex("[a-c]+([x-z]+)");

  そして、rのメソッドである serarchの引数に、文字列を探し出す元
になるテキストを与えます。

r.search("abcxyz");

  その後、

r.substring()
 
  とすれば、マッチ(一致)するパターンが得られます。




************************************************************

逆コンパイラ クラス・ライブラリ "mocha"

  javaのクラスファイルを、ソースコードに戻す(逆コンパイル)する
プログラムです。このクラスライブラリには以下のクラスが含まれています。

0.class			150.class		49.class
1.class			151.class		5.class
10.class		152.class		50.class
100.class		153.class		51.class
101.class		154.class		52.class
102.class		155.class		53.class
103.class		156.class		54.class
104.class		157.class		55.class
105.class		158.class		56.class
106.class		159.class		57.class
107.class		16.class		58.class
108.class		160.class		59.class
109.class		161.class		6.class
11.class		162.class		60.class
110.class		163.class		61.class
111.class		164.class		62.class
112.class		165.class		63.class
113.class		166.class		64.class
114.class		167.class		65.class
115.class		168.class		66.class
116.class		169.class		67.class
117.class		17.class		68.class
118.class		170.class		69.class
119.class		171.class		7.class
12.class		18.class		70.class
120.class		19.class		71.class
121.class		2.class			72.class
122.class		20.class		73.class
123.class		21.class		74.class
124.class		22.class		75.class
125.class		23.class		76.class
126.class		24.class		77.class
127.class		25.class		78.class
128.class		26.class		79.class
129.class		27.class		8.class
13.class		28.class		80.class
130.class		29.class		81.class
131.class		3.class			82.class
132.class		30.class		83.class
133.class		31.class		84.class
134.class		32.class		85.class
135.class		33.class		86.class
136.class		34.class		87.class
137.class		35.class		88.class
138.class		36.class		89.class
139.class		37.class		9.class
14.class		38.class		90.class
140.class		39.class		91.class
141.class		4.class			92.class
142.class		40.class		93.class
143.class		41.class		94.class
144.class		42.class		95.class
145.class		43.class		96.class
146.class		44.class		97.class
147.class		45.class		98.class
148.class		46.class		99.class
149.class		47.class		Decompiler.class
15.class		48.class

これらのクラスを、

mochaというディレクトリに入れて、そのディレクトリの親ディレクトリ
にCLASSPATHを通します。そして、MS-DOSプロンプトやUNIXのシェルから

java mocha.Decompiler <逆コンパイルしたいクラスファイル名>

と入力すれば、カレントディレクトリに、ソースコードが出力されます。
その名前は、

test.class 

を逆コンパイルした場合は、

test.mocha

になります。

mochaはほとんどすべてのクラスを正しく逆コンパイルすることができる
非常に強力なツールです。このような技術は、リバースエンジニアリング
とも言われ、著作権法上の問題が指摘されています。生成されたソース
コードの扱いには注意を払ってください。できれば個人的な勉強以外の
目的にこのツールを使用しないでください。




