第1章、Javaとゲームプログラミング

「Javaの特徴を、ゲームプログラミングにどのように生かすか？」



Javaに関する評価は、新聞などによると、ただただ「すごい、かんたん」 などとい
う、抽象的な表現ばかりです。しかし、実際にJavaを使って何かを 作るのならば、
Javaの性質をまず熟知しなければなりません。
この章では、Java言語の特徴を述べたうえで、その特徴を、ゲームデザインにどのよ
う に反映させるかを考えてみましょう。まずは、よいところ、わるいところに 分け
てみます。(よい、わるい、と決めるのは、非常に危険なことなのですが、 ここで
は、ゲーム作りにとって、面白いゲームを作る味方となるか、障害となる か、とい
う観点で決めています。)




1.1 超基本

Javaのソフトは「アプレット」と「アプリケーション」のふたつに大別できます。
「アプレット」はインターネット上のホームページに置いて、文章中の画像の よう
に手軽にダウンロードでき、それを操作したりすることができるものです。
「アプリケーション」は、ホームページの中に置くのではなく、実行ファイルを そ
れぞれのユーザーのマシンにインストールして、普通のソフトウェアのように 使う
ものです。
本書では、ほとんどすべての部分で、「アプレット」のほう を扱います。それは、
「アプレット」の方が手軽で、たくさんの人に見てもらえる 可能性があるからで
す。後半では、「アプリケーション」も扱います。


#図1.1-1<DONE>	webページにあるアプレット

#図1.1-2<DONE>  	コマンドラインで使っている javaアプリケーション


「アプレット」と「アプリケーション」では、プログラムのスタイルが少し異なる
他、 プログラムの各部分の動作のしかた、特にネットワーク関係やファイル関係の
動作が異なります。「アプレット」では、信頼できないネットワーク上のソフト を
そのまま動かすのですから、セキュリティのチェックがかなり厳しく行なわ れるた
め、ネットワーク通信などの機能が使えなくなっていますし、ユーザー のファイル
が破壊されない等の目的で、ファイルを扱うこともできなくなって います。それら
の制限は、「アプリケーション」を使用する場合は、ありません。
さらに、インターネットから直接ダウンロードしてブラウザー上でアプレット を実
行する場合と、一旦マシンにダウンロードしてから「アプレットビューア」 と呼ば
れるソフトで実行する場合でも、動作が異なります。「アプレットビューア」 の方
では、ユーザの設定次第で「アプリケーション」と同じように、 制限を取り払うこ
とができます。 結局、ユーザの判断でマシンにインストールし、使う場合なら、問
題なく 全ての機能を使えるということになります。インストールするということ に
よって、インストールするソフトの安全性について、ユーザの判断が含まれる こと
になり、そのソフトによって危険な状態になっても、その危険はユーザ の責任にな

るからです。
以上のような、Javaの安全性についての機能は、今までにも多くの変更がされて い
て、これからも変更されていく可能性があります。96年12月に公開された JDKのバー
ジョン1.1では、安全性の機能が大幅に強化されています。

1996年の12月の状況では、Netscapeはversion3.x以降は、アプレットのネットワーク
機能は非常に厳しく制限されている(詳しくは、第3章を参照) ので、事実上ネットワ
ークゲームのアプレット は実行させることができなくなっています。CGIを駆使した
りして対処することも できますが、実行させるには、「アプレットビューア」を使
うしかない というのが現実です。早く、これらのセキュリティチェックが、ユーザ
によって 設定できるようになってほしいものです。そうすれば、ネットワークゲー
ムを やるときだけ、セキュリティチェックをなしにしたりできるようになるので
す。 (噂では、Netscape 4.0以降では、ユーザがかなり自由に設定できるようになる
との事ですが、手元にあるNetscape communicatorのベータ版では、設定の項
目はありません。)




1.2 Javaのよいところ

        o インターネットとの親和性が高い。
          java言語は巷では「インターネット時代の言語」というように呼ばれてい
          ます。こう呼ばれるためには、いくつかの理由があります。
          その第一は、「手軽さ」です。WWWブラウザ等で画像をロードして見る の
          と同じように、ソフトをロードしてすぐ実行できるというわけです。この
          ことは、あなたがいつも使う「ブラウザ」が、javaに対応しているから
          こそ可能になることです。そして、そのソフトによって、Webページが イ
          ンタラクティブなものになるということが重要です。


#図1.2<DONE>		アプレットがあるホームページ


          第二に、「安全性」があります。インターネットには、様々な情報が流れ
          ています。あなたがロードしてきたアプレットも、その一種です。もしそ
          の アプレットに、あなたのハードディスクの内容を全部消してしまうプ
          ログラ ムが書かれていたとしたら?......大丈夫、安心してください。
          javaでは、 ページ上のアプレットの場合、そのような、ユーザーにとっ
          て危険なことは 一切できないようになっています。
          その他にも、アプレットをロードしてきたサイト以外のサイトと通信がで
          きない という特徴もあります。安全性は高いのですが、通信のゲームは
          作りにくく なります。これはトレード・オフの関係なので、ユーザによ
          る設定ができる ようになることが理想です。

          第三に、「どんなマシンでも動く」ということがあります。インターネッ
          トには、様々な機種のマシンがつながっていますが、そのいずれのマシン
          で も、同じように動くということです。今までは、ソフトを作るとすれ
          ば、 やれWindows用だ、Macintosh用だ、PC98用だ、と別々に開発する必
          要があり ましたが、javaでソフトを作る場合、自分のマシンで動くもの
          を作れば、そ れはもうすでに他のマシンでも動く、ということになるの
          です。ソフト開発 者は、この特徴によって、非常なコストダウンをする
          ことができます。 (注意：実際には、機種ごとに少しづつ違う動きをしま
          す。ゲームを作るには このことが非常に重要です。それについては、後
          の章で扱います。)

          第四に、ネットワーク機能を使ったプログラムが作りやすい、ということ
          が あります。ネットワーク越しに画像データや文章などのデータを取っ
          てくる ことが非常に簡単な上に(一行でできます！)、 Javaのプログラム
          同士がほんの少しのプログラムで通信できるのです。 このことによっ
          て、これまでは、ネットワークを利用したゲームを作るには 専門的な知
          識が必要でしたが、そのような知識がなくても通信ゲームを作ることがで
          きるようになりました。それでもある程度のノウハウは必要ですので、本
          書でもネット ワークゲームを作ることを最終的な目標として進めたいと
          思います。
          本格的にネットワークゲームを運用していくには、サーバーを動かすため
          の マシンが必要になってきます。その点で一般のパソコンユーザーには
          厳しいものが あります。しかし、小規模の対戦ゲームなどは十分に作る
          ことができます。ぜひ Javaを使ったネットワーク・プログラムに挑戦し
          てみてください。

        o プログラムするのが簡単
          これは、主に、今までJava以外の言語で開発をしてきた人の意見ですが、
          Javaでは、「オブジェクト指向」の効果によって、 複雑なことも、簡単
          に記述できます。例えば、画面に画像を表示 したりするのも、他の言語
          でやると、けっこう苦労したりします。javaでは 何行か書くだけですみ
          ます。このことは、ソフト作りの敷居をだいぶん低く しています。それ
          は、多くのページで、小粋なアプレットが使われているこ とからもわか
          りますね。

        o 分担するのが簡単
          これも、「オブジェクト指向」の効果なのですが、Javaで大規模なプログ
          ラム を作る時には、他の言語を使うよりも分担して開発することが容易
          です。その詳しい 理由は第3章に譲るとしますが、大規模なソフトウェア
          を大人数で開発する時に は、Javaを使うことを考えてみることは損では
          ありません。
          開発が分担しやすい、ということは、世界中のJavaプログラミングをして
          いる人々が 今までに作ってきた資産を吸収しやすいということにもつな
          がってきます。

        o 何といってもフリー！
          本書でも紹介しているJava Development Kit(JDK)は、フリーで公開され
          ています。 JDKをダウンロードして使うのも、JDKを使って作ったアプレ
          ットを配布するのも 自由です。このことによってJavaは急速に普及した
          とも言えるでしょう。 開発環境が自由に手に入るということは、それだ
          け何かを作る人の数が多いという ことにつながります。人数が多けれ
          ば、盛んに情報交換が行なわれます。盛んに 情報交換が行なわれればよ
          りよいソフトウェアが作られます。......というようになり、 現在では
          ますます盛んにソフト開発が行なわれています。フリーのJDKを使わなく
          ても、より簡単に開発できる、Visual J++のようなソフトウェアを
          使うことも可能です。




1.3 わるいところ
     上で述べたように、javaには、今までにない特徴がたくさんあります。でも、
     あっちを立てればこっちが立たない、という世の中の基本法則 が、ここでも働
     きます。それは.....


        o 処理速度の問題
          Javaのプログラムを実行したときの速度は、Java言語以外の言語(多くは
          C言語)で書かれている普通のソフトよりも、はるか に遅いです(数倍以
          上)。それは、上の「どのマシンでも動く」という特長の引き換 え条件で
          す。Javaのプログラムは、「仮想マシンコード」と呼ばれている、 それ
          ぞれのマシンの構造とは独立した情報になっているので、実行する時に
          それぞれのマシン用の情報に変換してやる必要があるためです。独立させ
          る ことで、「どのマシンでも動く」ようになるのですが、そのために
          「変換」 が必要になるということです。同時に解決することは、原理的
          に不可能なこ となのです。難しいですね。

#図1.3-1<DRAFT> インタープリタ(Javaバーチャルマシン)を介してマシンにアクセス


          ところが、JIT(Just In Time)コンパイラというものが登場しました。こ
          れは、 インターネットなどからJavaのソフトを読みこみながら、そのマ
          シンに最も 最適なコード(ネイティブコード)に変換していく、というも
          のです。 これができれば、Javaの実行速度は一気に何倍も高まります。
          現在では、 Windows 95でのVisual J++やNetscape、Internet Explorer、
          Macintoshでは システムの機能拡張として内蔵するなど、多くの環境で使
          用可能です。 


#図1.3-2 <DRAFT>  JITコンパイラの概念図


          JITについては、Javaの開発陣も、「Javaのプログラムの実行速度は、い
          ずれ速くなり、 一般のプログラミング言語で書いたのと遜色ない速度に
          なる。」というように 発言しています。
          このようになとJavaプログラムを動作させる環境によって速度が大幅に異
          なるという 状況が出てきます。それは、 Javaの大事な特長である、「ど
          のマシンでも同じように動く」という 性質に重大な影響を与えます。何
          倍もの動作速度の差は、プログラムにとって 質的な違いをもたらすから
          です。しかし、プログラマの望んだ速度でJavaプログラム を動かす方法
          はあります。それには独特のテクニックを要しますので、 第二章で解説
          したいと思います。


        o CPUが自分のものではないという問題
          速度の問題は、先に述べたように、純粋に実行速度が遅い問題と、 タイ
          ミングが一定していないという問題のふたつ以外にも、もうひとつありま
          す。 実行速度の問題については、JITのおかげで何とかなりそうです。し
          かし、 解決困難な問題がまだ残ります。
          Javaのシステムが動作するOSは、最低でも32ビットOSとなっていますが、
          そのすべてが、マルチタスクを実現しています。マルチタスクというのは
          画面にウィンドウをたくさん開いて、同時にいろいろなソフトを動かすこ
          とができる ようになっているものです。ワープロソフトを使って文章を
          書いている そのかたわらでディスクをフォーマットしている、というよ
          うに。

#図1.3-3<NOT YET>         タイムスライス


          このようなシステムでは、それぞれのソフトは、 自分の力では、CPUの力
          をどれだけ与えてもらえるのかを操作することができません。 ですか
          ら、調子よくゲームをやっていても、OSの都合(メモリーとかファイルの
          管理のための処理など)で「ちょっと0.5秒ほど待ってね」 という感じで
          一瞬止まったりするわけです。アクションゲームなどでは、こういう 動
          作は、非常に邪魔になってきます。 たとえばシューティングゲームの敵
          の弾が激しく飛んできている最中だったら 目もあてられません。
          Javaではこの問題を本質的に解決することはできません。 他の言語で
          は、OSごとに異なりますが、特殊な機能を使えば CPUの時間を操作するこ
          とはできるようになっているものもあります。 (directXなど) ところ
          が、すべてのOSがそうなっているとは限らないので、Javaの側としては、
          そのような 機能は実現できません。さらに、例えそのOSの特殊な機能を
          使って一定の速度で 動くようにしようとしても、今度はJavaも内部で独
          自にマルチタスク を行なっているため、Javaのレベルでも同じように動
          作タイミングが不安定になり ます。以上のように、Javaでは、「常に一
          定の速度で動く」ということを当分 実現できそうにありません。(参考ま
          でに、家庭用ゲーム機やPC用のゲームなどでは、 ディスプレイ画面の60
          分の1秒の垂直帰線タイミングに同期させて描画を行 なったりといった処
          理が一般的ですが、Javaではそのような「ハードウェアに近い」 処理は
          最も不得意な分野です。)
          とは言っても、ある程度は 一定の速度で動かすことはできます。そのた
          めのやりかた もあります(それは、第二章でやってみましょう)。だから
          全く作れないわけではあり ませんし、事実、普通にシューティングゲー
          ムを作っている人もいます。だいたい すべてのジャンルのゲームが出揃
          っていますが、現在の段階では、残念ながら、 まだまだ一般のゲームに
          比べられるようなものはありません。(ということは、チャンスが あると
          いうことですね！)


        o データサイズの問題

          Javaでアプレットのゲームを作る時に重要なのが、できあがったゲームの
          実行 ファイルや、使用する画像などのデータのサイズです。これはJava
          の問題では なく、ネットワーク(インターネット)の問題です。 最近のゲ
          ームは、パソコン用、家庭用、業務用問わず、 実行ファイルの大きさや
          データの量を、どんどん増やして画面も派手にして 音声もふんだんに使
          う、という方向で製作されています。CD-ROMなど大容量の メディアが普
          及したおかげとも言えます。
          ところが、Javaでゲームを作る場合は、特にアプレットにしてホームペー
          ジ に置いて、遊べるようにしておく場合は、ダウンロード時間も考えに
          入れる 必要があります。画像のダウンロードと同じですから、巨大なゲ
          ームを ダウンロードするには時間がかかってしまうからです。ロードに
          時間がかかる ゲームは、繰りかえし遊んでもらえる可能性が低くなりま
          す。(アプレット などの用語については、第二章を参照してください。)
          ところが、データを必要が生じてから読みこむようにすると、この欠点を
          かなりの程度まで克服できます。ゲームを始めた時点でゲーム後半で使う
          データを読みこんでおく必要はないのです。 例えばドラクエの場合だっ
          たら、 ゲームをはじめたばっかりの時に、最後のボス「りゅうおう」 の
          画像のデータはいらないわけです。データは必要に応じてロードすればよ
          いのです。 必要に応じてロードするやりかたの ことを、デマンドローデ
          ィングとも言います。(第2章で扱います。)

#図1.3-4<NOT YET>          デマンドローディング


          もちろん、アプリケーションの形にして、一度ゲームをダウンロードして
          インストールし、それ以降はインストールしたものを使うようにすれば
          大きいデータを持つゲームも実現できます。みなさんの中には、アプレッ
          トの形 で遊ぶ時も、ダウンロードしておいたファイルを読むようにすれ
          ばいいじゃないか と指摘する人もいるかもしれませんが、それはセキュ
          リティ上、できないように なっています。(将来は可能になります。) ア
          プレットは、ローカルのディスク(あなたのディスク) を読みかきするこ
          とはできないのです。セキュリティが高いということは、 同時に、ゲー
          ムを作るには、障害になっているのです。しかし、将来通信の速度 が上
          がれば、徐々にその欠点はなくなっていくと思います。(と同時に、必要
          な データも増えて、結局は変わらないようになる可能性もありますが。)

          他にもデータを節約する方法はあります。ファミコンゲームをよく見てみ
          れば わかるのですが、地形をタイル張りのような同じ模様の繰りかえし
          で表現する というものです。 

#図1.3-5<NOT YET>         タイルパターンを使っている例

#図1.3-6<NOT YET>         タイルを使って圧縮するという考え


          これも考えかたによれば圧縮の一種と言えますが、ゲームの世界を理解し
          やすく するという効果もありますし、十字ボタンとの相性もいいです。
          あと、これもドラクエの例で申しわけないのですが、同じ形の敵の色を変
          えて 違う敵として表現することで、画像データを一枚分節約できます。
          水色は 普通のスライムで、赤はスライムベスというように。ファミコン
          などのゲームでは、 非常に多く使われている手法です。Javaでもプログ
          ラムの助けをかりて同じ ようにデータを節約することができます。
          結論を言えば、使用するデータのサイズはできるだけ小さいに越したこと
          は ないが、プログラムを工夫すればよい、ということになります。同時
          に多量の 画像を表示するようなゲームは現段階では厳しいということで
          すね。 ネットワークシステムは急激に発展して通信回線も太くなってい
          くことでしょう から、その時節に応じた、目的に沿ったデータ量を意識
          しましょう。

          -------------------------------------
          JDK1.1では、Javaで使う情報を圧縮して送るこ とができるようになりま
          した。それを使えば、ぐーんと多くの情報をゲー ム中で使うことができ
          ます。それについても、第二章で説明します。)


        o 表示色の問題
          インターネットにつながっている多くのマシンは、画面全体をあわせて、
          256 色しか表示できないものがほとんどです。あと1年後には状況が変わ
          っている 可能性もありますが、実際のところ、グラフィックを描くこと
          を仕事にしてい る人以外は、フルカラー表示や65536色表示は必要として
          いないようです。 多くの色を表示するには、大容量のグラフィック表示
          用メモリーが必要なので すが、その容量を大きくするには、コストがか
          なりかかるのです。将来は どのパソコンでもフルカラー(1677万色)表示
          の時代がくるのでしょうか？
          Javaでは、最初からフルカラーに対応しています。ただし、プログラム的
          には1677万色 を扱えるのですが、パソコンが256色しか表示できないた
          め、自動的に減色 されます。この減色のやりかたは、それぞれのOSで異
          なっているよう です。その例を図に示します。

#図1.3-7 <DONE>    減色の状況   Macintosh,windows,SGI

          減色というのは、256色以上使う画像の色を、むりやり256色以下で表示し
          て しまうことで、画像が多少汚くなったようになります。フルカラーを
          扱う Javaのプログラムをフルカラー表示できるマシンで動作させたとき
          は、 確実にフルカラー表示されますが、256色のマシンでは、減色される
          ということです。これだけのことだったら、問題ないように思えるかもし
          れ ませんが、他のアプリケーションとの兼ねあいで、問題が生じます。
          画面全体で256色というのは、他のアプリケーションの使っている色も合
          わせての 数なので、アプレットでたくさん色を使うと、他のアプリケー
          ションの色が 変になったり、アプレットの色が変になったりするので
          す。例えば、Macintosh の場合、画面に置いてあるアイコンの色が白黒に
          なってしまったりします。 (JDKのバージョン1.1においては、アプレット
          以外ですでに使われている色を 選んで使うということもできるので、工
          夫をすれば、状況は改善します。) そういう点で、精密な色を扱うプログ
          ラムは難しいと言えます。しかし、ゲーム を作る場合は、そこまで精密
          に色を使うわけではないので、それほど問題は ないと言えましょう。決
          定的に重要な問題ではありません。 (ちなみに、Javaでよく使われるGIF
          形式の画像は、256色までしか使えま せん。)

#図1.3-8 <NOT YET>       256色のテーブルを複数のプログラムで取りあう


        o 入出力に凝れない
          Javaで使えるユーザーからの入力の手段は、キーボードとマウスです。ま
          た、 出力は、CRT(画面)と、音声が使えます。アプレットだとファイルは
          使えない 上にネットワーク通信も制限がありますが、 アプリケーション
          だと、ファイル入出力や ネットワーク通信も自由に使えます。
          ゲームと言えば、ジョイスティックを使うことも多いですが、標準のJava
          では サポートされていません。これはゲームにとっては非常に痛い。



1.4 以上の特徴を、どのようにゲームデザインに生かすか

     前節で述べたように、Javaには長所、短所ともにあります。どちらかというと
     「ゲームを作る」という目的にとっては、Javaは短所のほうが多いようです。
     その短所をつらまえて、「Javaではゲームなんかつくれへん」と言ってのける
     人もいます。 しかし、さまざまに工夫することによって、その欠点をある程度
     克服すること ができるのです。 実際、Javaを使って本格的にゲームを作る場
     合は、上で述べたJavaの欠点と いかにうまくつきあっていくかに焦点が置かれ
     ます。また、ここで出てくる 問題点は、Javaそのものの問題ではなく、ネット
     ワークシステムの問題も あります。
     Javaの長所は、「ゲームを多くの人に遊んでもらう」という目標にとっては 非
     常に都合がよく、Java言語は他の言語に比べると、 その点では圧倒的な評価を
     得ています。それだけでもすばらしいことでは ありませんか？


1.5  第一章のまとめ

     この章の議論では、次のようなJavaの特徴がわかりました。

        o アプレットとアプリケーションがある。
        o 実行速度は、遅いが、今後速くなっていく。
        o 常に一定の速度では動かない。
        o 厳密な色は表現しづらい。フルカラーはまず無理。
        o データサイズに気をつける必要がある。デマンドローディング にする必
          要がある。
        o インターネットに繋がっているマシンの多くで、実行できる。
        o 手軽にロードできる。
        o ネットワークを利用したゲームが作りやすい。
        o 入力は、マウスとキーボード。
		o 出力は、画面とモノラルサウンド。
        o アプレットではファイルの読み書きができない。

     これらを踏まえたゲームデザインは、簡単に言えば、 「表示はあんまり派手で
     はないが、アイデア勝負で小ぢんまりしたゲーム」 になるでしょうか。さらに
     「ネットワーク機能を生かしている。」まで入れば完璧ですね。ネットワーク
     を利用すれば、大規模な分散型ゲームも作ることができるかもしれません....
     といいつつ、現在私は研究中だったりします。 Javaで実現できそうにないの
     が、特に3次元空間を緻密に表現しているような ゲームです。ゲーム機では、
     nintendo64のmario64みたいなものや、パソコン で言えば、DOOM系のゲームで
     すね。 以前のファミコンゲームくらいのものだと、何とか作れるという状況で
     しょうか。 Javaで、3次元ポリゴンを高速に描画できるような機能パッケージ
     がサポートされれば、 また話が変わってくると思います。Javaは発展途中なの
     で、これからに期待したい ところです。



