第2章、ゲーム・デザイン

この章では、ゲーム作りのツボを紹介していきたい と思います。まず、ゲームデザ
インの分析をし、次に実際に作る方法について解説します。


2.1 ゲームデザインのツボ....プレイヤーの心理

     「ゲームの敵は、何のために出てくるのでしょうか？」という質問に、あな た
     なら、どう答えますか？

       1. 主人公をやっつけるため！
       2. 主人公にやられるため！
       3. 特に目的はない。
       4. 画面をいろどるため

     もしも、あなたが2の答えを最初に思いついたなら、私はもう何も教えるこ と
     はありません。答えに、よい方から順番をつけるとしたら、 2番、4番、3番、1
     番、といったところでしょうか。では、なぜそのような 順番になるのかを説明
     しましょう。 ゲームデザインをするにあたっては、あなたは、そのゲームをプ
     レイする 人の心理を相手にしていくことになります。そのときに、ひとつだ
     け、意識し ておいてほしい、究極の目標があります。 それは....

     「プレイする人を楽しませる」

     ということです。しごく当然のことのように聞こえます。しかし、これを忘れ
     ているとしか思えないゲームは無数にあります。それらのゲームは、「クソ ゲ
     ー」などというように呼ばれます。ただこの一つのことを実現するために、 注
     意しなければならないことがたくさんあります。例をあげながら、 注意点を探
     しだしてみましょう。

     ゲームに登場する、あらゆること(ゲーム用語で、「フィーチャー」といいま
     す。)は、すべて、「プレイヤーが楽しいと思う」ことにつながっていなければ
     なりません。敵は、一つの重要なフィーチャーなのですから、それが、3番の答
     えのように、目的なしに出てくるのでは、何にもなりません。それに対して、4
     番 は、まだ「画面をいろどる」という目的があるから、3番よりはよい答えだ
     と 言えますが、画面がきれいだからといって、「プレイヤーを楽しませる」と
     いう 原則を忘れていると、結局無意味になってしまいます。

     さて、以外と判断が難しいのが、1番と2番の違いです。1番の実例を挙げると、
     これは外国製のゲームにかなりよく見られるのですが、例えば、ゲームスター
     ト直後に、 いきなり絶対にやっつけることができない強い敵が出てきて、ほと
     んどの 場合そこでやられるが、運がよければ避けて通ることができる、という
     ようなものです。この敵には、二つほど問題があります。ひとつは、 ゲームス
     タート直後に、絶対に倒せない強い敵が出てくるという点、 もうひとつは、避
     けられるのが完全に運次第であるという点です。
     このふたつの点が、なぜ問題になるかというと、それは、いたって単純、 「プ
     レイヤーを楽しませない原因になる」からです。ひとつめの問題点は 「絶対に
     倒せない」がポイントです。 ゲームは、プレイヤーに次々と問題を与え、プレ
     イヤーがその問題を 解決していくことに喜びを感じる、というシステムです。
     解決できない問題が出されても、プレイヤーは喜びを得ることがありません か
     ら、そのような問題はゲームの本質を無視しているとしか言えません。 このこ
     とから、 まず、以下のような注意点が出てきます。

     「倒せない敵を出すときは、細心の注意を払え！」

     もう少し一般的に言えば、
     「問題は解決できるようにしておくこと。」

     と言えます。
     まず確実に、普段は倒せない敵でも、あることをすると倒せるようになるよう
     に しておかないと危険です。
     ふたつめの問題点も、「プレイヤーを楽しませない」わけですが、なぜでしょ
     うか。
     この例の場合、唯一の問題解決法は、この倒せない敵を避けて進むことなの で
     すが、これが運によって決まるということは、プレイヤーの実力が 反映されな
     いわけです。どんなにやりこんで上手くなっているプレイヤーも、 全くの初心
     者も、同じ結果になってしまうということです。これでは、 このゲームを繰り
     かえしプレイする気にはなりません。 というわけで、さらにもうひとつ、注意
     点が出てきました。

     「プレイヤーの実力が反映されるようにしておかなければならない。」

     ゲーム作りには、ここで出てきた、プレイヤーの心理に関する注意点の他に
     も、 技術的なことなどについても、たくさんの注意点があります。 しかし、
     すべての注意点は、 「プレイヤーを楽しませる」という目的に沿ったもので
     す。
     ゲームの内容を考える時には、絶対にこのことを忘れてはいけません。


2.2 ゲームデザインのツボ....もっと具体的に

     ずばり、ゲーム作りで最も重要なポイントは、以下のものに荒っぽく
     まとめることができます。
     以下の5つは、それぞれ深く関係していて、どれかを決めると、他のものもある
     程度決まり ます。そしてそれぞれは独立に決定できません。このことを頭に入
     れた上で読み進めてください。

       o 基本テーマ
       o 操作方法(入力)
       o 表示方法(出力)
       o プログラム
       o データ

     これらのうち、どれ一つが欠けても、ゲームはできあがりません。以降の節で、
     以上の5つのポイントについて、順番に解説します。


2.3 基本テーマを決める

          ゲームをデザインする際に、テーマがあれば、非常にデザインの助けにな
          り ます。面白いゲームを作るには、必要条件と言えるくらいです。テー
          マを決めるには、 例えばシューティングゲームなら、「敵を破壊してい
          く爽快感」「スピード感」 「ハイスコア狙いが熱い」などがテーマにな
          り得ますし、ドライビングゲームなら まずはやはり「スピード感」でし
          ょう。それ以外にも、「ドリフト感」などもありますね。 例えば、
          PlayStationで最初に出た、「wipe out」というレーシングゲームは、
          「浮遊感」 という、今までにないテーマを出してきています。このゲー
          ムは、もうひとつ、 テクノミュージックを前面に出すことによって、音
          楽ファンの心も捉えています。
          もちろん、ドライブゲームでも、 「敵車を破壊する爽快感」など、シュ
          ーティングゲームのようなテーマを取りいれ ているものもあります。
          以上のように、ゲームのジャンルによって、いろんなテーマがあることが
          わかりますが、 ジャンルにかかわらない重要なテーマもいくつかありま
          す。
          テーマを決めるには、どのようなことに注意をすればよいのでしょうか？
          私は、ゲームのテーマを決めるには、次のことが重要であると考えます。
             + 知的好奇心をくすぐる
             + 競争心を煽る
             + 問題解決の満足感を与える



          * 知的好奇心をくすぐるには、どうするか

          知的好奇心というのは、新しい 事実を知りたいという欲求のことです。
          人間が持つ重要な感覚のひとつです。 ゲームのデザインにおいては、こ
          の感覚を最大限に利用します。 具体的には、いろいろな情報を、うまー
          く隠していきます。 ゲームが進んでいくにつれて、新しい情報が入手で
          きるようにしておきます。 ゲームが終わるまでは、常に謎を残しておく
          ことです。 隠れキャラ、隠しアイテム、など。ロールプレイングゲーム
          だったら、 ゲーム自体が秘密の塊ですね。
          あなたのまわりのゲームでは、情報がどのように隠されているのか、 研
          究してみてください。

#図2.3-1<NOT YET>         ドラクエ1のスタート地点では、竜王の城が見える


          * 競争心を煽るには

          競争というと、他のプレイヤーと比較するという以外にも、プレイヤー自
          身が、自分自身の限界と 競争する、とか、コンピューターと競争すると
          いうものがあります。 それぞれのプレイヤー同士を競わせることによっ
          て、ゲームを盛りあげる、というのは、常套手段 です。ゲームセンター
          のゲームでは、直接的に相手と対戦できるゲームも多いし(格闘ゲーム、
          パズルゲームなど。)シューティングなど、主に一人用でプレイするゲー
          ムでも、対戦するかわりに スコアの順位表を表示して、間接的に競争で
          きるようになっています。スコアというものを使うのは ずばり競争心を
          煽るためだと言えるでしょう。それにスコアは、客観的なゲームの評価に
          なるので、 自分自身の中での競争をするきっかけにもなります。
          コンピューターとの対戦も、やりかたによってはかなり有効になります。
          コンピューターと対戦する と言っても、たとえばシューティングゲーム
          のように、自機と敵の性質がまるっきり違うような ものではなく、「ぷ
          よぷよ」や「バーチャファイター」や、「リッジレーサー」や、多くの
          マージャンゲームのように、敵と外見上は同等な条件で闘うというもので
          す。 (ぷよぷよの場合、ここで言う敵とは、主人公を窒息させる「ぷよ」
          ではなく対戦相手のことです。)

#図2.3-2 <NOT YET>          ぷよぷよの対戦中

          こうすることによって、プレイヤーの「勝ちたい」という欲求を引きだし
          ます。 勝つためには、ゲームを繰りかえしやることによって上達する必
          要があるわけです。 もちろん、コンピューターが操作している相手は、
          ある程度強くしておく必要があり ますし、その相手のプログラムで動か
          しているのですから、しっかりプログラムしておく必要が あります。そ
          のようなプログラム(相手を動かすためのプログラム)を、「思考ルーチ
          ン」と 呼びます。思考ルーチンがしっかりできていないと、対戦を主体
          にしたゲームは、全然面白くない ものになってしまいますから、注意が
          必要です。非常によくできた思考ルーチンの例として、 「パックマン」
          の敵の動きのプログラムがあります。プログラム的には、それほど複雑な
          ものでは ないのですが、「パックマン追跡モード」と「縄張り守備モー
          ド」を切りかえて行動することに よって、非常に有機的な行動を見せて
          くれます。
          RPGなどでは、敵の思考ルーチンもさることながら、強さやアイテム配置
          などの設定が それ以上に重要です。そのノウハウやセンスなどが出来を
          左右します。堀井雄二さんなどが なぜあそこまで洗練されたゲーム性と
          バランスを生みだせるかというと、それは設定に関する 研究に裏打ちさ
          れたノウハウを持っているからです。
          本当に面白いゲームを作るには、表示に凝ることよりも、 敵の思考ルー
          チンや設定を洗練することに時間を費やすべきです。 そのためには、プ
          ログラムするのと同じくらいの時間、テストプレイを重ねなければなりま
          せん。 実際、任天堂の内部には、数十人からなるデバッグ・チームがあ
          り、日夜テストプレイを続けて います。そしてそのチームからの報告が
          開発チームに渡されるのです。



          * 問題解決の満足感を与えるには

          ゲームの基本的構造は、次のようになっています。
            1. プレイヤーに、問題を与える。
            2. プレイヤーは、問題を解く。
            3. プレイヤーに、賞を与える。
            4. 1に戻る。

          具体的な例にすれば、

            1. ボスが出る。
            2. がんばってボスを倒す。
            3. ボーナス点が入る。
            4. 次の面に行く。

          とか
            1. 敵が出現する。
            2. がんばって倒す。
            3. お金や経験値が手に入る。
            4. 次の敵が出る。
          という感じです。プレイヤーに与えられる問題が高度で難しいほど、賞で
          あるボーナス点や アイテムの価値は高く、得られる秘密も大きな秘密で
          なければなりません。 ここでは、「プレイヤーの満足とは何であるか
          ？」について、考えてみましょう。 プレイヤーの満足は、先ほどの「知
          的好奇心」にも深い関係がありますし、それから 「自己実現欲」「競争
          心」、「他の人間に認知されたい心」 にも関係があります。ボーナスと
          して得られるものとしては ゲームにおいては、次のようなものがありま
          す。

#表2.3-1<DONE>       ゲーム中の効果の分類表

------------------------------------------------------------------------
             分類      ゲームの中の効果     ゲームの外の効果
------------------------------------------------------------------------
           ボーナス  自機が増える等、有利
           点        になる                点数で競う競争心
------------------------------------------------------------------------
           アイテム  ゲームが有利に展開す それが珍しい場合、ステータスシン
                     る                   ボルになる。
------------------------------------------------------------------------
           情報      ゲームが有利に展開す 知的好奇心をそそる
                     る
------------------------------------------------------------------------

          ゲームの中の効果は、すべて、「ゲームをプレイヤーにとって有利に展開
          できるようになる」という 点が共通です。または、それを少しひねっ
          て、「使いかたによっては、ゲームを有利に展開できる 可能性がある」
          というようにしてもよいかもしれません。(エッチゲームの、「エッチな
          絵が表示される」というボーナスは、「情報」の種類のボーナスですが、
          ゲームが有利に展開する という効果がないかもしれません。ゲーム外の
          効果の、好奇心をそそる効果はあります。また、 ゲームのエンディング
          は、それ自体はゲームを有利に進めることにはつながりませんが、 好奇
          心をそそることはまちがいありません。だからこそ、いくつものエンディ
          ングを用意したり するわけです。

          ゲームの外の効果は、ゲーム自体を有利に進める効果はありません。しか
          し、その効果を意識的に 狙うことができます。点数ランキングを表示す
          るとか、 「ポケットモンスター」のように自分だけのキャラを育てるこ
          とによって 自分のステータスシンボルにするとか、対戦モードを付ける
          とかの手段によって、競争心を 煽るとか、ゲームと実際の賞品(フィギュ
          アなど)を結びつけるのもいいかもしれません。 マージャンゲームの「脱
          ぎ」は、典型的なゲーム外効果と言えますね。 ゲームの中、外の効果の
          違いはありますが、とにかく、プレイヤーにとって嬉しいことが起これば
          よいということです。効果的に、プレイヤーが「嬉しい」「楽しい」と感
          じる局面が生じれば、 きっとそのゲームは面白いものになります。
          プレイヤーが「嬉しい、楽しい」と感じるためには、その前に、「苦し
          い、辛い」という感じ を与える状況を作ることが必要です。 音楽でも、
          盛りあげる部分の前には、静かな部分が用意されています。このようにア
          クセント を付けないと、ゲーム展開がだらだらしたものになってしまい
          ます。
          ゲーム展開にメリハリを付けるために、よくゲームデザイナーは「フェー
          ズ(局面)」を 意識したデザインをします。ジャンルごとに見てみると、

             + アクションゲーム
               パワーアップアイテムを取っている状態とそうでない状態に分ける
               ことができます。 それ以外にも、ボス・フェーズ、ザコ・フェーズ
               という状態変化もよく取り入れられ ていますし、無敵状態とそうで
               ない状態に分けたりもします。「パックマン」では、 無敵モードの
               時しか敵をやっつけられないようにすることによって、ゲームのテ
               ンポ感と、 先ほど述べた、「幸せの前の苦しみ」をうまく演出して
               います。

#図2.3-3<NOT YET>          パックマンの無敵時間の時の画面

             + ロールプレイングゲーム
               通常モードと、戦闘モードに分けることが多いです。戦闘モード
               が、プレイヤーに問題を 与えるフェーズで、当然動きが激しく、通
               常モードが、比較的静かな進行となって います。戦闘という問題を
               クリアすれば、もちろんボーナスが与えられます。それは 経験値で
               あり、お金であり、情報です。
               アクションロールプレイングは、どちらかというとアクションゲー
               ムの部類としたほうが よいでしょう。

             + シューティングゲーム
               アクションゲームとだいたい共通なのですが、シューティングゲー
               ムでは、敵の 出てくる密度が極端に変化するように設定しておくこ
               とで、飽きのこない展開にする ことができます。例えばあるステー
               ジの設定を考える時に、最初に次のようなグラフを 書いておきま
               す。そしてポイントごとに、「中ボス出現」というように決めてい
               きます。

#図2.3-4<NOT YET>          シューティングの設定のグラフの例

               このことを研究するには、現代シューティングの古典、「ゼビウ
               ス」の敵の密度を 研究してみるとよいと思います。(PlayStationで
               移植版が発売されています) 「ゼビウス」では、空中敵は画面に同
               時に6機しか出てこない のに、非常な「密度の違い感」つまりメリ
               ハリがあります。「ゼビウス」の原作以外のもの は、そのあたりが
               大きく損なわれているのでお勧めできません。

#図2.3-5<NOT YET>        ゼビウスの休みの時とそうでない時の比較

             + シミュレーションゲーム
               明確に、「部隊配置フェーズ」「戦闘フェーズ」と分かれているも
               のも多いですね。 4ヶ国間の戦いなら、4ヶ国が順ぐりに配置するよ
               うになっているものがほとんどです。 シム・シティーのようにフェ
               ーズがないように見えるゲームでも、実は、「人口増加 時期」「商
               業地帯繁栄時期」などというような時期が、うまく交代で出てくる
               ように 調整されています。そしてお金がたまってきたら空港を配置
               する、というように、 プレイヤーが自分でフェーズを作っていきま
               す。

             + パズルゲーム
               あまりにも幅が広いので一言でくくるのは無茶ですが、 現在ではパ
               ズルゲームとは落ち物である、というような風潮なので落ち物に関
               して言えば、 局面は、「やっつけている状態」「やられている状
               態」くらいしか変化がありません。 パソコンゲームでは超有名な
               「マインスイーパー」や「まきがめ」も、局面変化はないと 言える
               ようなものが多いです。昔の落ちものでないゲーム「ロードランナ
               ー」では、 自分で好きなタイミングで地面に穴をあけることがで
               き、それが一定時間たつと復活 するようになっていて、さらにその
               穴がプレイヤーや敵の生死に直接関わっていたので、 「穴が開いて
               いる状態」「そうでない状態」でプレイヤーの心理が大きく違いま
               した。 これは局面変化をうまく演出している例でしょう。

             + 古典的パズルの類
               将棋や囲碁やオセロ、トランプ、その他の既存のゲームをもじった
               ようなものは、 それぞれのゲームの「局面」の性質を受けついでい
               ます。これらのゲームについては 性質が明らかなので、説明は省略
               します。

             + ドライブゲーム
               うまく「局面」を作っていくには、コースをよく考えて作ることで
               す。これはシューティング ゲームの敵の密度の設定とも似ていま
               す。 メリハリのあるコース作りが大切です。難しいコーナーや長い
               直線を効果的に配置 するのは当然のことでしょう。そして、それら
               のコースは、練習すれば必ずうまく抜けられ るようにしておかなけ
               ればなりません。
               セガの名作「セガラリー」では、周回コースながら、途中に違う性
               質の路面 (泥など)が用意されていたりしましたし、古典的名作「ア
               ウトラン」 では、景色がいろいろに変わることによって、 プレイ
               ヤーを飽きさせないようになっていました。このゲームは周回コー
               スでないドライブ ゲームの代表格です。そういえば最近のドライブ
               ゲームは ほとんど全部が周回コースになっていますが、これは3Dコ
               ースが普通になり、モデリング が大変になったためでしょうか。筆
               者はPlayStationの「wipeout XL」のコースが 最近ではアーケード
               も含めて最高の出来であると思っています。


          さらに細かく、ジャンル別のテーマについて、考えてみましょう。 分り
          やすくするために、それぞれのジャンルに合うと 思われるテーマを表に
          して挙げてみましょう。もちろん、ここにないテーマもあり得ますし、
          そういうところにこそ新しさがあると言えます。ぜひ、ここに挙がってい
          ないよう なテーマを見つけだしてください。

          また、下の表で挙げたテーマが、それぞれのゲームでどのように実現され
          ているのか、ゲームを 観察してみてください。何よりも、あなた自身の
          目を磨くことが大切です。 あなたがこのような目でゲームを見るように
          なったとき、あなたは 確実にゲームクリエイターへの道を一歩踏みだし
          ているはずです。

#表2.3-2<DONE>        ジャンルごとのテーマ

------------------------------------------------------------------------
            ジャンル                         テーマ
------------------------------------------------------------------------
           シューテ  破壊の爽快感、スピード感、スコア狙い、連鎖狙い、 弾避
           ィング    けの面白さ、独特のパワーアップ、地形の面白さ、飛行感覚
------------------------------------------------------------------------
           レーシン
           グ        スピード感、ごぼう抜きの快感、車を操作する楽しみ
------------------------------------------------------------------------
           パズル    整理していく気持ちのよさ、連鎖狙い、考える楽しみ
------------------------------------------------------------------------
           ロールプ  恐怖感、役を演じる楽しみ、育てる楽しみ、冒険心をくすぐ
           レイング  る
------------------------------------------------------------------------
           シミュレ  戦略を練る楽しみ、教育的効果、箱庭効果、現実的体験、リ
           ーション  アリティの追及
------------------------------------------------------------------------
           アクショ  キャラクタを自在に操作する楽しみ、さまざまな動きの敵を
           ン        かわしていく楽しみ
------------------------------------------------------------------------
           スポーツ  スポーツ選手になれる、実際の試合の雰囲気を楽しむ、記録
                     に挑戦する
------------------------------------------------------------------------
           アドベン
           チャー    登場人物になりきる、判断を重ねていく楽しみ
------------------------------------------------------------------------
           クイズ    問題自体の面白さ、知的好奇心
------------------------------------------------------------------------

          音楽や視覚的美しさなどは、ジャンルによることなく、ひとつのテーマに
          なり得ます。例えば、 キャラクタゲームなどは、そのキャラクタ自体が
          テーマであると言えます。しかし、キャラクタ自体 がテーマであると言
          っても、他にゲームを成立させるようなテーマが欠けていると、それはク
          ソゲー になってしまいます。(注：キャラクタゲームとは、ゲームに登場
          するキャラクタが、主に他のメディア によってすでに認知されているよ
          うなゲームのことです。たとえばガンダムとか、ウルトラマンとか。 三
          国志なども言いかたによってはこのジャンルに入るかもしれません)
          また、実際のゲームをコンピューター上で模倣しているゲーム(例えば、
          サッカー、ゴルフ、オセロ、 将棋、など)は、テーマがそれらの元になっ
          ているゲームと同じなわけです。ということは、あとは 操作と表示に細
          心の注意を払うことになります。また、これら既存のゲームを、いろいろ
          とアレンジして 別なシステムのゲームを作るというのも、すでに面白さ
          がわかっている同じテーマを使えるために、 安定した面白さを確保でき
          ると 言えます。また、それらのゲームには対戦モードという、 ほぼ確実
          に面白いモードを付けることができます。他の人と争うのは、 間接的で
          あったとしても、非常に面白いものです。
          最近は、先ほどのように分類できない、自分で音楽を作っていくというよ
          うなものや、 ただ話をするだけとか、そういうものもどんどん出てきて
          います。既存のジャンルにとらわれない、 新しいゲームについて、ぜひ
          研究してみてください。


2.4 操作方法について

          操作方法と言う場合、「操作デバイス」つまり、どのような装置でもって
          操作をするか、という 面と、その操作デバイスを使って実際にどのよう
          に入力するか、という面の二つについて 考える必要があります。まずは
          「操作デバイス」について考えてみましょう。


          *入力デバイス

          例えば、ごぞんじジョイスティックがあります。それ以外にも、ジョイス
          ティックを 2本使って両手の動きをシミュレートするというものや、トラ
          ックボールを使って 細かい動きを追及できるようにしたりとか、飛行機
          のコックピットのように操縦桿があるとか、 車のハンドルとか、スキー
          板のような台に乗るようになっているなど、 バリエーションは無数にあ
          ります。 アーケードゲームは、匡体もデザインしてしまうことができる
          ので、入力の方法にいろいろ凝ることができますが、家庭用のゲーム機や
          パソコン用では、 あるていど限られてきます。家庭で手軽に購入できて
          スペースもとらないようなものに 限られてしまうからです。
          家庭用ゲーム機だと、十字キー、2次元アナログジョイスティック などが
          一般的でしょう。パソコン用のゲームだと、 ジョイスティックなどの普
          及率はあまり高くありません (もちろんパソコンにつないで使うことはで
          きるし、対応しているゲームも多いです)が、 やはり100%普及しているキ
          ーボードとマウスを使うのが一般的でしょう。ジョイスティック に対応
          しているゲームも、キーボードとマウスで同等の操作ができるようになっ
          ています。
          せっかくゲームを作るのなら、多くの人にプレイしてもらえるほうが、評
          価をいろいろ聞く ことができるし、やる気も出てくるというものです。
          ゲームを作る環境に合った、つまり 普及率の高い入力方法でできないか
          どうか、まずは考えてみましょう。
          最近は、パソコン用でもジョイスティックを使うことができますが、
          Javaでゲームを作る場合、一般のゲームとちがって、ジョイスティックを
          使うことができません。 将来的にジョイスティックを使うことができる
          ようになるかもしれませんが、ジョイスティック がすべてのパソコンに
          装備されているという状態にならないと、Javaの重要な特徴である、
          「どのマシンでも動く」という条件に合わなくなってしまうので、その可
          能性は100%ではありません。 しかし、セガサターン、プレイステーショ
          ン、Nintendo64などでも、インターネットに接続する キットが発売され
          つつあり、Javaも動くようになっていくでしょうから、Javaでジョイステ
          ィック やパッドが使えるようになる日はそう遠くないかもしれません。
          現段階では、Javaのゲームでは、 マウスと、キーボードを使うことにな
          ります。というわけで、マウスとキーボード、ジョイスティック の機能
          の比較をしてみましょう。Javaでは対応していないもので、他にもいろい
          ろな 入力方法が考えられます。今までにあったゲームで使用されていた
          ものや、まだ使用されていない けれども面白そうなものについても、紹
          介します。(将来的にJavaも対応するかもしれませんね。)



             + ジョイスティック

               ここで言うジョイスティックは、ファミコンやスーパーファミコ
               ン、プレイステーション、 セガサターン、などに標準でついている
               パッドや、ゲームセンターのゲームの多くのゲーム で使われてい
               る、棒の先に丸い玉がついていて、横に押しボタンがいくつか ある
               もののことです。 (バーチャファイターやぷよぷよ、ほとんどのシ
               ューティングゲーム、など。その中には ジョイスティックが左右に
               ふたつあったり、ボタンしかなかったりというものもあります。 ゲ
               ームセンターに行って観察してみましょう。)
               現在では、スティックが左にあって、ボタンが右というスタイルに
               なっていますが、昔は、右にスティックがあるようなゲームもあり
               ました。
               ジョイスティックは、デジタル入力装置です。デジタルというの
               は、スイッチのON/OFF の状態を調べて、それを入力に使うというこ
               とです。ひとつのスイッチにつき、ON/OFF のふたつの状態しかあり
               ません。スティック(十字ボタンには、上下左右に、4つのスイッチ
               が配置されていて、上に倒した時は上のスイッチが入り、右に倒し
               た時は右のスイッチが 入る、という風になっています。右上に倒し
               たときは、右と上の両方のスイッチが 入るようになっていることを
               利用して、ゲームのプログラムの方で、右と上が同時に押され てい
               れば右上に移動する、というようなプログラムを書くわけです。

#図2.4-1<NOT YET>           ジョイスティックの構造

               このように、ジョイスティックは、すべて、スイッチのON/OFFの状
               態の組みあわせに なっています。
               ところが、ジョイスティックの中でも、「アナログジョイスティッ
               ク」と呼ばれている ものがあります。有名なものとしては、
               Nintendo64の標準コントローラーの真中について いる、あのスティ
               ックです。パソコン用や他のゲーム機用には、飛行機の操縦桿のよ
               うな 形をしていて、先の部分や腹の部分にスイッチがついているも
               のも多いです。
               普通のジョイスティックは、倒しているか、倒していないかの二つ
               の状態しかないことを 上で述べましたが、アナログスティックは、
               「ちょっと倒している」とか、「かなり倒して いる」とか、間の状
               態も存在します。間の状態をどのように管理しているかというと、

#図2.4-2<NOT YET>            アナログスティック

               最も倒しているときを100、真っ直になっているときを0などと決
               め、その間の 角度によって、0と100の間の数値を調べているわけで
               す。実際にはこのように数値で 管理しているので、本来の意味でア
               ナログではないのですが、普通のジョイスティック よりはアナログ
               に近いので、便宜的に「アナログスティック」と呼んでいます。

             + マウス

               Javaで対応しているのは、ボールが一つで、ボタンが1つから3つの
               ものです。Macintoshだと1つ、Windows95だと、多くが2つ、UNIXだ
               と、 多くが3つとなっています。

#図2.4-3<NOT YET>           SGIのマウス、Windowsのマウス、Macのマウス


               ボタンを3つ使うようなプログラムは、ボタンが ひとつしかない
               Macintoshではどうやって使うのかというと、キーボードの 機能ボ
               タンを押しながらマウスのボタンを押す、というように実現して い
               ます。したがって、左右を同時に押すようなプログラムはMacintosh
               では、うまく入力することができません。仮に何とかできるように
               しても、 ボタンが3つあるものよりもはるかにやりにくいものにな
               るでしょう。
               結論としては、できるだけ、ボタンは左ボタンひとつで何でもでき
               るように 作っておくべきです。右ボタンを使ったらより便利だけれ
               ど、でも左で 必要なことは全部できる、という設計にしておきま
               す。
               マウスは、アナログジョイスティックと似ていて、アナログ入力で
               す。 この場合の「アナログ」も、アナログスティックの場合と同じ
               で、数字で段階を 表しています。マウスは、ボールが回転している
               速度で管理されているので、 止まっている状態が0、最高速で回っ
               ている状態が100、というように決まっている わけです。上方向に
               回っていれば+100、下方向だったら-100というように。 上下と左右
               に、別々に、回転速度を感知するセンサーが付いているので、 斜め
               の移動とかも当然できるようになっています。速度で管理するのは
               システムの仕事です。システムはマウスの移動速度を常にチェック
               していて、 ユーザーがマウスを移動させたら、その分だけマウスカ
               ーソルを移動させます。 だから私たちがプログラムする場合は、
               「マウスのカーソルがどこにあるか」 を調べることになります。


             + キーボード

               キーボードは、デジタル入力装置です。それぞれのボタンは、「押
               されてるか、 そうでないか」の二つの状態しかありません。ジョイ
               スティックと同じですね。 ただジョイスティックと違う点は、ボタ
               ンが非常にたくさんあることです。 普通でも100個以上はあります
               ね。
               ただ問題なのは、機種によってボタンの配置も違うし、ファンクシ
               ョンキーや テンキーがないようなものもあることです。 テンキー
               でしか操作できないようなゲームにした場合、テンキーがない 人は
               プレイできません。多くの人に遊んでもらえるようなゲームにしよ
               うと 考えるなら、どのキーボードでも同じであるような範囲に絞る
               必要があります。 例えば普通のアルファベットと数字とリターンキ
               ーくらいでしょうか。記号は ASCIIとJISで異なりますが。世界で広
               く普及しているのはASCIIキーボード です。あなたのキーボードは
               どうですか？中括弧が横に二つならんでいる のがASCIIで、リター
               ンキーの横に縦にならんでいるのがJISです。

#図2.4-4<NOT YET>         ASCIIキーボードとJISキーボード


               キーボードの特徴は他にもいろいろあります。まず、キーボードの
               ボタン を押しっぱなしにしていると、連続的にキー入力されるよう
               になっている 場合が多いということです。繰りかえされる速度は、
               機種とか設定によって まちまちですから、自分のマシンで丁度よい
               からといって他でそうとは限りません。 それから、シフトなどを押
               しながら他のキーを押すと、別の意味になるという 使いかたもよく
               されます。代表的には、アルファベットが大文字になるという 処理
               です。これは、昔のタイプライターの構造の名残です。(タイプライ
               ターは、 シフトボタンによって、機械的に打ち出す文字をずらして
               大文字にしていました。)


          * 実際の操作方法

          では次に、Javaで使用可能な、キーボードやマウスを使っていかに操作を
          するか ということを考えてみます。
          目の前にキーボードを置いて特徴を見てみると、次のような特徴がありま
          す。
             + デジタルである。押されているか、そうでないかという状態しかな
               い。
             + ボタンがたくさんある。5列ある。
             + 同時にいくつも押せる。
             + どんなにたくさん押しても、プログラムで調べることができる。
             + アルファベットの部分はどのキーボードも同じ配置である。
             + テンキーがないものもある。
             + ファンクションキーがないものもある。
             + ShiftやCtrlやAltなどは、押していると、キーの文字が変化する。
             + コントロールキーとCaps Lockキーの位置はいれかわっていることも
               ある。Shift はどれも同じ位置にある。
             + スペースキーは長くて押しやすい。
             + 右ききの人は、マウスを右手で持つので、左手でキーボードを触れ
               る。
             + 押しているとキーリピートが始まる。(Javaでは重要！理由は後述)
             + 'f'と'j'(Macintoshは'd'と'k')に突起がある。
             + キートップに文字が書いてある。
             + LEDがついていて光る。
             + CapsLockは押したままになる。(トグル)
             + 両手で使うものだ。
             + ひとつのパソコンにはひとつのキーボードがつながっている。
          では次に目のまえにマウスを置いて特徴を調べてみましょう。
             + 丸い重い玉が入っている。
             + 平らな板の上でないと使えない。
             + 長い距離を動かすには、途中で浮かして戻してよい。(これに気がつ
               かない人も多い)
             + ボタンは最低1個ある。3つまで。(電卓がついているのもあるが、プ
               ログラムから調べることが できないのでダメです。)
             + 別にどんな向きで持ってもよい。
             + キーボードとちがって性能にはかなり差がある。
             + マウスを動かすと画面上のカーソルが動く。
             + ひっくりかえすと使えない。
             + 線が一本でている。その線がどこにつながっているかは、機種によ
               って違う。
             + 動かす速度によって、速度の倍率が違う。(つまり、ゆっくり1cm動
               かすのと、すばやく 1cm動かすのでは、すばやく1cm動かした方が画
               面上のカーソルはたくさん動くということです。)
             + 液晶画面では、カーソルを動かすとぼやけるものもある。
             + ひとつのパソコンにはひとつのマウスがつながっている。
               (Macintoshはいくつもつけることが できますが。)
             + ブック型のパソコンを使っている人はマウスではないが、マウスと
               同じことが実現できる 何かが
          さて、以上のような特徴をどう使い、 面白いゲームに結びつけるかで
          す。
          私が考えている、Javaゲームの定番スタイルは、片手でマウスを操作し、
          そして空いている方の手でキーボードを操作するというスタイルです。
          パソコンゲームの基本スタイルと同じものですね。
          キーボードをメインに使ってマウスを補助的に使うか、その逆にするか、
          もしくはマウスのみにするか、キーボードのみにするか、両方を均等に使
          うか、 悩みますが、私はできるだけマウスを使うことを考えるとよいと
          思います。というのは、 キーボードには、「キーリピートの呪い」があ
          るために、押し続けるような操作に支障 をきたすからです。(詳しくは、
          第三章の「キーボードの入力」を参照してください。) キーボードは、
          「弾を撃つ」とか、「モードを切りかえる」とか、そういう事を 主に担
          当させます。例外的に、シフトキーやコントロールキーには、キーリピー
          トは かからないので、押しっぱなしにすることができます。 コントロー
          ルキーでジャンプするとか、そういう風に使うことは十分考えられます。
          また、多くの人はブラインド タイピング(キーボードを見ずにタイプす
          る)ができないので、画面から目をはなさない とできないような操作は避
          けるのがよいでしょう。左端のいくつかのキーを使って 操作するように
          しておきます。このあたりは、PCのゲームでノウハウが蓄積されて いま
          す。DOOM系のゲームの操作は洗練されていて、キーボードとマウスで十分
          に 遊ぶことができます。

#図2.4-5<NOT YET>       Quakeの操作の方法

          プレイヤーが気持よく操作できるようにするには、やはりマウスをどう使
          うかがポイント になります。ところがマウスを使って操作をする場合に
          は、マウスを激しく動かすと、アプレットの 領域の外にマウスカーソル
          が出てしまうという問題が発生します。

#図2.4-6<DRAFT>        アプレットの外に出ると操作ができない


          アプレットの外にマウスが出てしまうと、どんな操作をしてもアプレット
          には届かない ので、注意が必要です。特に、一方向にマウスをどんどん
          転がすというような 操作(「マーブルマッドネス」に代表されるトラック
          ボール・ゲームのような) は、Javaでマウスカーソルの位置を操作するこ
          とができない現状では、実現不可能です。 このことから、ゲームのデザ
          インも、「アプレットの中にある複数のアイコンをクリック またはドラ
          ッグしていく」とか、「アプレットの中にマウスカーソルを入れたまま、
          キーボードでプレイする」とか、「アプレットの中の位置を指定すると主
          人公が そこまで歩く」というようなものにならざるを得ません。筆者が
          いちど作ってみたい と思っているのは、キーボードにあるたくさんのキ
          ーを「あいまいに」操作する というものです。キーボードにはたくさん
          のボタンがあって、画面を見ながら正確に 操作することは非常に困難で
          すが、「あいまい」でよいならば簡単です。つまり、 「キーボードの右
          のほう」とか、「上の方」とか、「どこかの隣りあっているキー」 と
          か、そういう操作をできるようにするわけです。今年の学園祭では先輩と
          いっしょに そういう操作系の「ツボ刺激ゲーム」をつくろうかとたくら
          んでいますが、うまく いくでしょうか。(ちなみにそれはJavaではなくて
          X68000というマシンで作る予定です。 Javaでもできるでしょうが。)
          -------------------------------------
          ここで、ゲームならではのデジタル入力装置の使いかたを紹介しておきま
          す。それは、

          タイミング

          です。 デジタル入出力ならば、押すか離すか、そのふたつの状態しかあ
          りませんが、そこに 「いつ押すか」「いつ離すか」というタイミング情
          報を付加してやれば、一挙に幅広い 入力が可能になります。実際、ボタ
          ンをひとつしか使わないで、どれだけ面白いゲーム ができるかを追及す
          る、「ワンボタンゲーム」というジャンルも存在します。(もちろん アマ
          チュアの世界でですが。)ワンボタンゲームでは、ボタンを押したり離し
          たりする タイミングがすべての基本になってくるのです。


2.5 表示方法(出力)

          入力方法も大事ですが、どのように表示するかも重要です。ここでは、
          「表示」とは、 「ゲームの状態を、プレイヤーに効果的に伝える」とい
          う意味で使用しました。 以降は、「出力」という表現を使います。
          出力も、入力と同じように、「出力デバイス」と、そのデバイスを使って
          実際にどのように 表示するかという、実際の「表示方法」とにわかれま
          す。まずは「出力デバイス」 について考えてみましょう。



          * 出力デバイス


		  + ブラウン管

          その代表格は、ブラウン管ディスプレイ(画面)を使って表示するやりかた
          です。 一般的にコンピューターゲームでは、画面とサウンドを、中心的
          な出力手段としています。 それはJavaでも同じで、それらの両方を使う
          ことができます。
          業務用のゲームであれば、匡体が揺れるとか、3Dメガネをつけて立体視す
          るとか、 画面をいくつも並べるとか、風が吹くとか、特殊な効果を狙え
          るのですが、 Javaなどを使って パソコン上でゲームを作る場合は、ほと
          んど、画面とサウンド以外は使うことが できないと考えるべきです。パ
          ッケージソフトの場合は、赤青メガネ附属とか そういうソフトもありま
          すが。
          Javaアプレットにおいて画面出力の制限となるのは、表示面積です。ブラ
          ウザの ウインドウの大きさを越えることができないという問題が根本的
          にあります。 しかしこれは、ブラウザとは別のウインドウを出すことに
          よって解決できます。

#図2.5-1<DONE> 別なウインドウをNetscapeから出す

          次に色の問題がありますが、この問題はそれほど大きな問題ではありませ
          ん。

		  + サウンド

          次にJavaアプレットにおいてサウンド出力の制限となるのは、PCM出力し
          かできない こと(流行のMIDIを使ったりはできません)、ステレオ出力が
          できないことです。 ゲームでは、ステレオ効果を使って相当な臨場感を
          出すことができますが、Java ではこれがまったくできません。アプレッ
          ト自体がそこまでのことを要求されると 考えて設計されているわけでは
          ないので仕方がないことですが、残念なことです。



          出力デバイスをどう使うか？

          さてさて、ゲームにおいては、プレイヤーは、ゲームからの出力に何らか
          の反応をして、 それを入力するという行動を繰りかえします。しばしば
          それは同時に進行します。 例えばシューティングゲームであれば、画面
          に新しい敵や敵弾、地形などの 情報がリアルタイムで追加されていく一
          方、それらを見ながらプレイヤーは 同時にジョイスティックで入力して
          いきます。例えば「テトリス」ならば、 新しいブロックが画面に出現し
          た瞬間、プレイヤーは思考を開始し、次の 入力を考えています。
          出力の方法を考える時には、次のことに注意してください。
          「できるだけ、プレイヤーが状況を把握しやすくすること。」
          例えば、「ぷよぷよ」では、それぞれの「ぷよ」の形は異なっています
          が、 色もそれぞれ異なっています。「ぷよぷよ」においては、同じ種類
          の「ぷよ」を つなげて消すというルールであるため、種類を区別できる
          ことが出力の最低条件 になります。形も色もそれぞれ異なるのですか
          ら、「ぷよ」同士を区別するためには、 そのどちらかだけでよいわけで
          すが、あえて形も色も違うようにしているのには、 演出効果の狙いだけ
          でなく、プレイヤーがより認識しやすいようにという配慮も あるので
          す。

#図2.5-2<NOT YET>  ぷよは形も色も違う

          もしも、「ぷよぷよ」でおじゃまぷよにいろんな色がついていたら？？？
          ゲームは だいなしになってしまうでしょう。(そしてそれはまた外国のゲ
          ームにはありがちな フィーチャーだったりするのです....しかし、それ
          でもそのゲームが成りたってしまう 国民性というものがあるとしたら、
          それは何なのでしょうか...)
          作ろうとしているゲームをプレイする時に、プレイヤにとって何が最も必
          要な 情報なのかをまず見極め、それに基いて出力の方法を考えてくださ
          い。




2.6 プログラム

          どちらかというと、プログラムは最初にあるものではなく、5つの要素の
          うち他のもの と同時に決定されていく、という感じになります。プログ
          ラムが最初にあって、 入力や出力やテーマがそれについていくというこ
          とはあまりないでしょう。 例えばルービックキューブを解く思考ルーチ
          ンが趣味の結果できてしまって、 それを何とかして後からゲームにしあ
          げる、というような場合はあるかもしれませんが。

          実際にゲームをプログラムしていくやりかたは、そのゲームを動かす環境
          によって、似てはいますが 千差万別です。例えば、PC98用のパソコンゲ
          ームを作るやりかたと、Javaでゲームを 作るやりかたと、ゲームツクー
          ルで作るのと、Saturn BASICで作るのとでは、 大分違います。共通点
          は、「少し作って動かしてみてその結果を見て問題があれば 手直しして
          また実行してその結果を見て.....」を繰りかえすことだけで、それぞれ
          の ことをどうやって実行するのかが、全く違います。しかし、どれか一
          種類でもやったこと があれば、他のものにもすっと入っていくことがで
          きます。Javaで作った経験が あれば、他の環境で作ることもできるよう
          になっているはずです。
          さて、ゲームプログラミングをするにあたって常に注意している必要があ
          るのは、 「実際にプログラムすることができるかどうか、または困難さ
          はどの程度か。」 ということです。
          これは例えば、「女の子と話をする」というゲームがあったとして、その
          実現の 仕方を考えたとき、プログラムによってプレイヤーの入力した言
          葉を解釈して、 それを理解して返事をする、というような方法はほぼ非
          現実的であるという事です。 この場合は、会話のデータをたくさん用意
          しておいて、状況によってそれを使い分ける というような方法が関の山
          でしょう。超絶的にプログラムの技術があって、手間もかけて よいな
          ら、「プレイヤーの音声で入力し、それを理解し、女の子の声を計算で作
          り出して、 スピーカーで鳴らす」などということも不可能ではないでし
          ょう。しかしこれは 現在の科学技術ではまだ到達していないことなので
          す。大学の研究ではなく、ゲームは プレイヤーが楽しければそれでいい
          のですから、 CD-ROMに女の子の声をたくさん録音しておいて、 それを小
          出しにしていくという実装のほうが現実的でしょう。 実現したいことが
          プログラム的にどれくらい大変かを見抜くセンスはゲームを作る時に 非
          常に重要です。しかしこれは経験で身につけていくもので、一言では言え
          ません。 まあひとつだけ言えそうなことは、「人間的な処理は難しい」
          ということでしょうか。 同時に、「思考ルーチンは難しい」とも言えま
          す。 実際、将棋のゲームはあまりにも思考ルーチンの比重が高いので、
          同じメーカーがずっと続編を出している、という状況が 続いています。
          これらのメーカーは、昔からの思考ルーチンのノウハウの蓄積が あるか
          らです。人間と勝負できるようなコンピュータ将棋のプログラムをゼロか
          ら 書くことは至難の業と言えるでしょう。
          プログラムの困難さや、どの程度の努力、手間が必要か、速度は足りるか
          どうか、 というようなセンスは、経験を積むにしたがって身についてゆ
          きます。そして、 いつしか、ゲームをぱっと見せられたときに、「う
          わ、すごいなあ、どうやって プログラムしたんやろ」とか「なんだ、簡
          単にできそうやん」とか、思うように なっていることでしょう。(筆者
          は、mario64を見たときに、「このプログラムは きっと何人か殺したにち
          がいない。」と思いました。バーチャ3もしかり。)


       5. データ

          作りたいゲームのために必要とされるデータが用意できるか、またそのデ
          ータを作る ためにはどの程度の手間がかかるかを、やり始める前につか
          んでおく必要があります。
          例えばクイズゲームなどは、その情報量が重要ですから、開発の時間の多
          くはデータ収集に なるかもしれません。
          また例えばアクションゲームでは、地形がプログラムによって動いたりす
          るのでプログラム とデータの関連が深く、データの手間は即プログラム
          の手間にもなってきます。地形 作成の担当の人がプログラムのことを分
          かっていなかったりすると、大変なことに なります。
          データを作る手間についての感覚は、プログラムの困難さについての感覚
          と同じくらい 重要です。そしてデータとプログラムをうまく分離するノ
          ウハウも重要になってきます。
          現時点で最もデータ量が多いと思われるゲームは、「ファイナルファンタ
          ジー7」です。 以下は取材の結果ではなく勝手な予測ですが、だいたい当
          たっているはずです。逆に 言うと、ある程度ゲームを作ったことがある
          と、このゲームを見て、 以下の予測程度はできるようになるということ
          です。規模は大きいですが、個人で ゲームを作る場合でも発想方法は同
          じです。参考にしてください。
          CD-ROM4枚という量は、圧縮を展開すると裕に10GByte(!)を越えるデータ
          になります。 その90%以上は画像データで、コンピュータによって作られ
          た画像です。ところが、 それらの画像データを処理するプログラムは、
          画像データとは独立に開発され、 アプレットビューアならぬスクウェア
          特製画像データビューアの様なものになっています。 このエンジンは、
          将来の他のゲームにも流用できる、あるいはそのエンジンごと他の 企業
          に売ることができるように汎用性を持たせてあります。したがってプログ
          ラム開発 チームは比較的小数で、全体の管理をする「ビルダ」一人と、
          プログラマが数人という ところでしょう。もしかすると、シーンごとに
          一人プログラマがいるかもしれませんが。 さて、データ作成チームはそ
          れと対照的に人海戦術です。まず分担しやすいように、 ゲームをシーン
          に分けて担当を決めます。(これはmario64などでも行なわれている) 分担
          の基本は、それぞれのデータを独立させることですが、ゲームの場合完全
          に独立 させることはできないので、共通の部分は最初に決定しておきま
          す。(この共通部分の 策定も、なかなか緻密な考えが必要になります)グ
          ラフィックデータは、3D処理をする レンダラーにかけるデータを作る作
          業であり、その中に出てくる物体ごとに分担が できるので、あなたはシ
          ーン2の地形、あなたは主人公、あなたは街にいるおじいさん、 というよ
          うにどんどん分担できます。企業ならばこれに新人教育をからませると有
          効 でしょう。(実際スクウェアはやっていますね。)

          最後に、データを作る時には、「再利用性」「プログラムからの独立」
          「変更のしやすさ」に注意をはらってください。それと同時にプログラム
          についても 「汎用性」「データからの独立」「実現可能性」に注意をは
          らってください。 「プログラムは、データを生かすための道具である
          。」という考えかたを身につけて ください。

#図2.7<NOT YET>        プログラムは、データを生かすための道具であるの図



