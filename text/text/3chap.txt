

第3章、ゲーム作りの準備

この章では、まず、ソフト開発の基本から解説していきます。そして、Javaを使って
実際にプログラムを開始する段階まで進みましょう。実際にプログラムする時の こ
まかい事柄については、第4章で扱います。


3.1 ソフト開発とは

     ゲームのテーマも決まり、設計もできてきました。いよいよ開発に取りかかり
     ま しょう。
     さて、ゲーム(ソフトウェア)を作るには、いったいどのようにしたらいいので
     しょうか？ 今までにコンピューターのプログラムをしたことがない人は、具体
     的にどうやって ソフトが作られているのか、分からないはずです。まず、ここ
     では、開発のサイクルという ものを説明します。
     まずは、プログラムを作ることについて。
     プログラムというのは、英語や日本語の文字で書かれた、テキストファイルの
     ことです。 このテキストファイルは、ワープロやエディタで作ることができま
     す。(これらも、CD-ROM に、収録されています。)これらのファイルは、人間が
     書くものですから、当然、人間は 読んで意味を理解することができます。本書
     で扱うJava言語というのは、そのテキスト ファイルの書きかたの一種です。日
     本語や英語のように、ひとつの文法をもった、言語です。 ところが、このテキ
     ストファイルは、人間にとって意味がわかるものの、コンピューター にとって
     は意味不明なのです。コンピューターは、人間の読み書きする言語は理解でき
     ない のです。コンピューター(CPU)は、機械語だけを認識することができま
     す。 ところが、逆に、機械語は人間にとって、ほぼ理解不能です。次の例を見
     てください。


File name: sample.java
----------------------------------------------------------------
import java.awt.*;

public class sample extends java.applet.Applet
{
    int clickx = 0 , clicky = 0;

    public void paint( Graphics g  )
    {
        g.drawString( "Hello!" , clickx , clicky );
    }

    public boolean mouseDown( Event e , int x , int y )
    {
        repaint();
        return true;
    }
}
----------------------------------------------------------------
     このファイルは、(ちょっと勉強すれば、)人間にとって意味が理解できます。
     これは Java言語の、プログラムです。この内容を、機械にとって意味がわかる
     ように変換する と、もはや文字ではなくなるので、判別不可能になります。

     変換後

File name: sample.class
----------------------------------------------------------------
J~:>^@^C^@-^@(^H^@^X^G^@#^G^@^]^G^@^^^G^@^\
^@^C^@^K
^@^D^@^N^@^B^@^O
^@^E^@^M^@^B^@^L^L^@^_^@%^L^@'^@^U^L^@^[^@!^L^@ ^@%^L^@&^@^U^A^@^V(Ljav
a/awt/Graphics;)V^A^@    mouseDown^A^@^MConstantValue^A^@
Exceptions^A^@^OLineNumberTable^A^@^AI^A^@^Ksample.java^A^@
SourceFile^A^@^FHello!^A^@^NLocalVariables^A^@^DCode^A^@
drawString^A^@^Qjava/awt/Graphics^A^@^Rjava/awt/Component^A^@^Rjava/applet/Appl
et^A^@^Grepaint^A^@^F^A^@^W(Ljava/lang/String;II)V^A^@^U(Ljava/awt/Event;
II)Z^A^@^Fsample^A^@^Epaint^A^@^C()V^A^@^Fclicky^A^@^Fclickx^@^A^@^B^@^D^@^@^@^
B^@^@^@'^@^U^@^@^@^@^@&^@^U^@^@^@^C^@^A^@$^@^P^@^A^@^Z^@^@^@+^@^D^@^B^@^@^@^O+
^R^A*4^@
*4^@^H6^@ 1^@^@^@^A^@^T^@^@^@
^@^B^@^@^@
^@^N^@^H^@^A^@^Q^@"^@^A^@^Z^@^@^@"^@^A^@^D^@^@^@^F*6^@^F^D,^@^@^@^A^@^T^@^@^@
^@^B^@^@^@^P^@^D^@^Q^@^A^@ ^@%^@^A^@^Z^@^@^@^]^@^A^@^A^@^@^@^E*7^@^G1^@^@^@^A^@
^T^@^@^@^F^@^A^@^@^@^D^@^A^@^W^@^@^@^B^@^V
----------------------------------------------------------------

     ところどころに、英語らしき文字が含まれていますが、意味不明ですね。上の
     例は、ワープロでこの機械語ファイルを読みこんだときの例です。 コンピュー
     ター上で文字を扱うことができるのは、人間が約束を決めて、 97番は"A"だ
     よ、というように決めているからなのです。画面に表示する時に、 もしも「97
     番を表示せよ」という命令があったら、"A"と表示するように 仕組まれている
     だけなのです。人間にとっての"A"は、 コンピューターにとってはただの97と
     いう数です。 このように、機械語のファイルは文字としては読めませんが、数
     字の列として考える ことはできます。 このファイルを数字の列として見るた
     めのプログラムに通して見ると、次のようになります


File name: sample.class
----------------------------------------------------------------
0000000 feca beba 0300 2d00 2800 0008 0718 2300
0000020 0007 071d 1e00 0007 0a1c 0300 0b00 000a
0000040 0004 090e 0200 0f00 000a 0005 090d 0200
0000060 0c00 000c 001f 0c25 2700 1500 000c 001b
0000100 0c21 2000 2500 000c 0026 0115 1600 4c28
0000120 616a 6176 612f 7477 472f 6172 6870 6369
0000140 3b73 5629 0001 6d09 756f 6573 6f44 6e77
0000160 0001 430d 6e6f 7473 6e61 5674 6c61 6575
0000200 0001 450a 6378 7065 6974 6e6f 0173 0f00
0000220 694c 656e 754e 626d 7265 6154 6c62 0165
0000240 0100 0149 0b00 6173 706d 656c 6a2e 7661
0000260 0161 0a00 6f53 7275 6563 6946 656c 0001
0000300 4806 6c65 6f6c 0121 0e00 6f4c 6163 566c
0000320 7261 6169 6c62 7365 0001 4304 646f 0165
0000340 0a00 7264 7761 7453 6972 676e 0001 6a11
0000360 7661 2f61 7761 2f74 7247 7061 6968 7363
0000400 0001 6a12 7661 2f61 7761 2f74 6f43 706d
0000420 6e6f 6e65 0174 1200 616a 6176 612f 7070
0000440 656c 2f74 7041 6c70 7465 0001 7207 7065
0000460 6961 746e 0001 3c06 6e69 7469 013e 1700
0000500 4c28 616a 6176 6c2f 6e61 2f67 7453 6972
0000520 676e 493b 2949 0156 1500 4c28 616a 6176
0000540 612f 7477 452f 6576 746e 493b 2949 015a
0000560 0600 6173 706d 656c 0001 7005 6961 746e
0000600 0001 2803 5629 0001 6306 696c 6b63 0179
0000620 0600 6c63 6369 786b 0100 0200 0400 0000
0000640 0200 0000 2700 1500 0000 0000 2600 1500
0000660 0000 0300 0100 2400 1000 0100 1a00 0000
0000700 2b00 0400 0200 0000 0f00 122b 2a01 00b4
0000720 2a0a 00b4 b608 0900 00b1 0000 0001 0014
0000740 0000 000a 0002 0000 000a 000e 0008 0001
0000760 0011 0022 0001 001a 0000 0022 0001 0004
0001000 0000 2a06 00b6 0406 00ac 0000 0001 0014
0001020 0000 000a 0002 0000 0010 0004 0011 0001
0001040 0020 0025 0001 001a 0000 001d 0001 0001
0001060 0000 2a05 00b7 b107 0000 0100 1400 0000
0001100 0600 0100 0000 0400 0100 1700 0000 0200
0001120 1600
----------------------------------------------------------------


     ソフト(プログラム)を作るのは人間で、それを動かすのはコンピューターなの
     ですから、 人間が作った プログラムを機械語に変換してやる必要がありま
     す。そういう変換をすることを、 「コンパイルする」と言います。さきほどの
     例は、テキストファイル(Java言語の プログラム)をコンパイルする前のもの
     と、した後のものを比較していたのです。 変換しただけですから、内容的には
     同じものなのですが、言語が違うため、全く異なる 外見になっていますね。
     以上のことから、コンパイルという作業が、非常に重要であるということがわ
     かります。 コンパイルさえできれば、あとはコンピューターに、「それを動か
     せ」と指令すれば プログラムは動きだします。それで期待していない動きをし
     たら、またテキストファイル を書きなおして、コンパイルし、もういちど実行
     させます。このくりかえしが、 プログラム開発のサイクルです。この繰りかえ
     しのことを、「デバッグ」と言う こともあります。「バグ」というのは、期待
     しない動きをしたその原因のことです。

#図3.1-1<DRAFT>    テキスト変更-コンパイル-実行 サイクル


     機械語のファイルは、自分で直接作ることはありません。コンパイラ(コンパイ
     ルする ためのソフトウェア)が作ります。 ソフトを作るためには、必ずこのサ
     イクルが必要です。 このサイクルを営むやりかたは、それぞれのOSによって違
     います。 次の節では、あなたのコンピュータのシステムに、Javaのプログラム
     開発キットを インストールして、ソフトを開発できる環境を整えます。あなた
     のシステムの項目 を参照してください。


3.2 開発環境をととのえる

     Javaの開発環境は、JDK(Java Development Kit)と呼ばれていて、現在はバージ
     ョン 1.0.2と、ベータ版(開発中)の1.1が使えます。 ところが1997年1月の段階
     では、新しい方のJDK version1.1は、 Windows 95とSPARC Solaris用しか発表
     されていません。Macintoshや他の機種を使用 している方はしばらくの間は
     JDK1.0.2を使ってください。JDK1.0.2の時と同じように、 順次発表されていく
     はずです。また、1.1の正式版は97年の3月末までに発表され る予定になってい
     ますが、インストール方法やマニュアルはほぼ同一であると思われ ます。正式
     版が発表された時点で、再度インストールしてください。

     JDK以外にも、多くの企業によってJavaの開発キットが発売されています。 そ
     のひとつに、Microsoft社の"Visual J++"があります。高速なコンパイル速度
     と、 視覚的な操作が売りになっています。それについては、"Windows95"の
	 項目の最後に 説明します。

	 開発システムのインストールの目標は、次に示すアプレットのプログラムを入力
	 でき、コンパイルでき、実行できるようにすることです。そのためには、エディタ
	 と、開発環境の両方をインストールする必要があります。
	
File name: sample.java
-------------------------------------------------------
import java.awt.*;
public class sample extends java.applet.Applet
{
	public void paint(Graphics g ){
		g.drawString("This is a sample!" , 10,50);
	}
}
-------------------------------------------------------

File name: test.html
-------------------------------------------------------
<applet code=sample.class width=200 height=200></applet>
-------------------------------------------------------

#図3.2-1<DONE>	実行結果(sample.java)


	では、機種ごとに説明します。

        o Windows95(JDK)
            1. JDKをCD-ROMからハードディスクに移す。

               Windowsでは、JDKの1.0.2と1.1の両方が使えます。 それぞれインス
               トールの方法が違いますから、別々に説明します。 本来ならば、
				最新のリリースであるJDK1.1の方を薦めたいのですが、JDK1.1
				のappletviewerには、キーボード入力ができないとか、アプレット
			   ビューアの設定ができないといった不具合があるので、とりあえず
               正式版がリリースされるまでは、JDK1.0.2の方を使ったほう
               がよいでしょう。本書のサンプルプログラムは、1.0.2では、完全に
			   動作します。

               JDK1.1の場合

               CD-ROMにjdk1.1-beta2-win32-x86.exeというファイルが ありますか
               ら、そのファイルをルートディレクトリの"Program Files" に移し
               ます。このファイルはEXEファイルといって、実行させることが で
               きます。実行すると、以下のファイルができます。(注意：正式版で
               は若干 異なる可能性があります！)
               その中に、setup.batという名前の実行ファイルがあります。 これ
               は自動的にインストールをしてくれるソフトになっていますから、
               エクスプローラなどから普通のソフトとして 起動してください。あ
               とは指示に従ってキーボードを押していけばOKです。 Sunからの著
               作権についてのメッセージがありますが、あなたが普通に 使うに関
               しては全然問題ありません。
               さて、javaという名前のディレクトリができましたね。 ここまでう
               まくいけば、 javaというディレクトリ以外のファイルは消してしま
               ってもOKです。

               JDK1.0.2の場合
               CD-ROMにJDK-1_0-2-win32-x86.exeというファイルがあります。この
               ファイルは自動的に自分自身を展開してインストールまでやってし
               まう プログラムになっていますから、このファイルをルートディレ
               クトリの "Program files"に移します。そしておもむろに実行さ
               せ、あとは、適当に クリックしていけばOKです。

            2. マニュアルをハードディスクに移す

               マニュアルは、netscapeや Internet Explorerなどで見ることがで
               きる、HTML形式 になっています。CD-ROMに入れた状態で見ることも
               できますが、 それでは遅いので、ハードディスクに入れましょう。
               マニュアルは、エクスプローラを使って、ディレクトリごと移動さ
               せると 簡単です。JDK1.1の場合は1.1用のマニュアルを、JDK1.0.2
               の場合は1.0.2用の マニュアルをインストールしてください。マニ
               ュアルがインストールできたら、 エクスプローラなどで
               packages.htmlというファイルを探し、 そのファイルをnetscapeや
               Internet Explorerなどにドラッグ&ドロップ してブックマーク(し
               おり)しておくと便利です。

            3. 環境を設定する

               以下の項目は、JDKのどちらのバージョンについても同じです。
               JDKの開発キットには、javac,appletviewer, javap,javadocなど、
               いろいろなツール(実行ファイル) が含まれます。 JDKをインストー
               ルした場所にもよりますが、これらの実行ファイルを 起動すること
               ができればいいのです。
               "Program Files"ディレクトリにインストールしたとすれば、

               C:\>C:\"program files"\java\bin\javac

               などというふうに、フルパスですれば起動することができます。 と
               ころが、毎回このように打つのは面倒なので、エディタを使って 次
               のような設定をルートディレクトリにある AUTOEXEC.BATというファ
               イルに加えます。MS-DOSプロンプト から、editという命令を打ちこ
               めば簡易ワープロが出てきます ので、それを使って追加できます。
               editは、Javaのプログラムを 作るのにも使えます。 

			   editを起動するコマンドラインの例です。
		
			   C:\>edit autoexec.bat

#図3.2-2<DONE>    windows95の標準ツール "edit"


               set path=%path%;c:\"program files"\java\bin\

               このようにすれば、

               C:\>javac

               と、一発で起動できるようになります。もちろん、Windows95を起動
               しなおす のを忘れずに。
               参考までに、筆者がJDK1.1を使っているPC98のAUTOEXEC.BAT の内容
               は次のようになっています。


File name: AUTOEXEC.BAT
----------------------------------------------------------------
@IF ERRORLEVEL 1 PAUSE
@ECHO OFF
SET HD=C:
SET TMP=C:\TEMP
SET TEMP=%TMP%

SET PATH=C:\WINDOWS;C:\WINDOWS\COMMAND;C:\USR\BIN;C:\"program files"\java\bin

SET TERMCAP=A:\ETC\TERMCAP
SET TERM=pc98-25
SET TZ=JST-9
SET PAGER=less
VERIFY= ON
prompt $p$g

WIN
----------------------------------------------------------------

            4. テキストファイルを作るには

               先ほどのedit以外にも、メモ帳、 ワードパッドなど、文字が入力で
               きるものなら何でもかまいません。 付録のCD-ROMに入っているエデ
               ィタを使うのもよいですし、お好きなワープロなど があるのならそ
               れでOKです。ワープロを使う時には、.javaで終わる ファイル名で
               保存するようにしてください。そして保存する文書のタイプは、
               「テキストファイル」を選んでください。以下に、editを使うとき
               のMS-DOSプロンプトでの入力例を示します。ここでは、最初に示した
				sample.javaを入力してください。

               C:\>edit sample.java

            5. コンパイルするには

               MS-DOSプロンプトのコマンドラインから、

               C:\>javac sample.java

               というように、edit などで作成したプログラムのファイルを指定し
               ます。 エラーが出ると、その後に続いてエラーメッセージが出ます
               し、成功すれば、 今作業中のディレクトリ(カレントディレクトリ)
               に、クラスが作成されます。dirコマンドで見たときに、sample.class
				というファイルができていれば成功です。エラーが発生した場合は、
				sample.classはできません。
				

            6. アプレットを動かすには

               editなど を使って、最初に示したtest.htmlを入力します。
               test.htmlには、アプレットをどのように起動するかが記述
               されています。
               このファイルを、javacが出力したクラスファイルと同じ ディレク
               トリに置き、コマンドラインから

               C:\>appletviewer test.html

               と打てば、新しいウインドウが出現して、アプレットの実行が始ま
               ります。実行結果のようなウインドウが出ればインストールは完了です。
				おつかれさまでした。



        o Windows95(Visual J++ 1.0)

			1. Visual J++のインストール方法自体は、Visual J++のマニュアルに
			   詳しく書いてあるので省略します。また、基本的な操作方法も、
			   附属のマニュアルに詳しいので、そちらに任せておきます。

			2. Developer Studioを起動します。
			「ファイル」メニューから、「新規作成」を選んで、
			「プロジェクト ワークスペース」を新しく作成します。その時に、
			Applet Wizardを選択しないようにしてください。

			3. 「挿入」を選んで、「Javaクラスの新規作成」を選びます。
			その時に、クラス名はsampleで、「拡張」はjava.applet.Applet
			とします。そして、「アクセス制御」は、publicを選びます。
			このあたりの設定は、プログラムを少し手伝ってくれる程度の
			ことをしてくれるだけなので、違うようにしても大丈夫です。
			とりあえず、プログラムが、 上で示したsample.javaと同じに
			なればよいのです。続きは、手で入力してください。
			
			4. いろいろやって、sample.javaが入力できたとします。

			5. 「ビルド」メニューから、「コンパイル」を選びます。
			エラーが出たら、打ちまちがいですので、直してください。

			6. コンパイルできたら、「ビルド」から「実行」を選びます。
			そうすると、Internet Explorerが起動して、アプレットが実行
			されます。Visual J++の環境では、上で示したtest.htmlは、Developer
			Studioが自動的に作成してくれるので、作る必要はありません。

#図3.2-3<DONE>		Visual J++ と Internet Explorer

		
			7.マニュアル類についても、Developer Studioに、かなり詳しめ
			の日本語のものがついている(これだけでもかなりの価値があります！)
			ので、大丈夫でしょう。JDK1.1が出ましたが、それに対応する新しい
			バージョンが、Microsoftからリリースされていくはずですので、
			時々チェックしましょう。


        o Macintosh(JDK)

            1. JDKをCD-ROMからハードディスクに移す

               Macintosh用のJDKは、現在、バージョン1.0.2が最新です。 CD-ROM
               をダブルクリックしてウインドウを開いていって、 次のどちらかの
               ファイルを選んで「アプリケーション」 フォルダなどに移してくだ
               さい。

                  + JDK-1_0_2-MacOS.sea.bin
                  + JDK-1_0_2-MacOS.sea.hqx

               移した後、これらをダブルクリックすると、 どこにインストールす
               るのか聞いてきますので、インストールする 場所を指定します。イ
               ンストールの際に、システムフォルダの中にも 自動的にファイルが
               置かれます。
               JDK 1.0.2という名前のフォルダができますから、その 中から Java
               RunnerやApplet Viewer といった名前のアイコンを探してみてくだ
               さい。これらが、 JDKの主要なツールです。インストールは、これ
               で終わりです。 


            2. マニュアルをCD-ROMからハードディスクに移す

               これも同じように、CD-ROMから、お好きなフォルダの中に移動して
               ください。 マニュアルを読むには、たくさんあるHTMLファイルの中
               でも、 packages.htmlというファイルからリンクをたどっていく の
               が使いやすいので、そのファイルをNetscapeにドラッグしてブック
               マーク しておいてください。

            3. 環境を設定する

               Macintoshの場合は、特に必要ありません。お好みで、エイリアスを
               作る などしてください。

            4. テキストファイルを作るには

               筆者は、機能は多くないのですが動作が軽い YooEditを使っています
               (CD-ROMにも入っています)。 このエディタは、プログラムしやすい
               サポート機能もありますので、 お薦めです。これ以外でも、 普通
               のテキストファイルとして保存できるものであれば、 どんなもので
               もかまいません。 

#図3.2-4<DONE>        使いやすいエディタ "yooedit"

				エディタを起動して、最初に示した sample.javaを入力して保存
				します。


            5. コンパイルするには

               作ったテキストファイルを、ドラッグして、先ほどの JDK 1.0.2と
               いうフォルダの中の Java Compilerに落とします(ドラッグアンドド
               ロップ)。 コンパイルが始まると、小さいウインドウが出て状態を
               知らせます。 うまくいくと、ソースプログラムがあったフォルダに
               クラスファイルが 出現します。エラーがあった場合は、大きいウイ
               ンドウが出て、 エラーの内容を表示します。その場合は入力ミスで
				すので、打ちまちがいがないかどうか、調べてください。そして、
				直してから、保存して、もういちどコンパイルしてください。

#図3.2-5<DONE>          java compilerのエラー出力


				sample.classというファイルが、sample.javaと同じフォルダの中に
				出現すれば、成功です。

            6. アプレットを動かすには
		
				最初に示した、test.htmlをエディタで入力して、それをsample.class
				と同じフォルダに置きます。そして、test.htmlを Applet
               Viewerにドラッグアンドドロップ すると、実行されます。

#図3.2-6<DONE>       test.htmlをドラッグすれば実行される

               このファイルには、
               code=sample.classとして、クラス ファイルが指定されていることが重
               要です。 width=200 height=200の部分は、アプレットの 大きさを
               表しています。いろいろ変更してみてください。
               以降、このようなやりかたでアプレットを実行させることを、 「実
               行する」と表現します。
			   test.htmlに入力ミスがあった場合は、アプレットは実行されないので
				注意してください。



		o Solaris(Sun OS 5.x JDK)

          UNIXの基本的な使用法については、ご存じのこととして話を進めますの
          で、 ドットファイルやエディタの使いかた、ファイルのコピーの方法な
          どの説明は 省略します。もしも基本的な操作方法でわからないことなど
          があったら、 私は、The UNIX Super Text(上下巻)を見てみることをお勧
          めします。 買うとちょっと高いですが、もしもあなたが今UNIXを使える
          環境にあるのでしたら あたりを探してみると見付かる可能性は高いで
          す。ちなみに、Solarisは、System V系のUNIXです。
	
		  Solaris2.3以降用には、JDK1.1beta2が利用可能です。
          Windows版のappletviewerで問題になっている、
          キーボード入力関連のバグはありませんので、十分使えます。(ただし、
          appletviewerの設定ウインドウが働かないというバグは残っています。
		  アプレットを使ってネットワークプログラムをする場合には、1.0.2を
		  使ったほうがよい場合もあるでしょう。)

         1. JDKをCD-ROMからハードディスクに移す
            UNIXではCD-ROMの使いかたは機種と種類と状況によって様々ですの
            で、 ここでは説明しません。どうしてもCD-ROMが使えない状況であ
            れば、 インターネットを使ってダウンロードしなければなりませ
            ん。 その方が簡便だというかたも多いでしょうから、ダウンロード
            サイトを 挙げておきます。 
            JDK 1.1(sparc)
            ftp://ftp.javasoft.com/pub/jdk1.1/jdk1.1-beta2-solaris2-sparc.sh
            JDK 1.0.2(sparc)
            ftp://ftp.javasoft.com/pub/JDK-1_0_2-solaris2-sparc.tar.Z
			JDK 1.0.2(80x86)
            ftp://ftp.javasoft.com/pub/JDK-1_0_2-solaris2-x86.tar.Z

            目的のファイルがCD-ROMまたはインターネットからダウンロード
			できたら、あとは、gzipや unzip、tarなどで展開します。
			SPARC Solaris 用のJDK1.1は、それ自体がシェルスクリプトになっていて、
			それを実行する だけでよいようになっていますから、コマンドラインか
			ら、
			
			$ jdk1.1-beta2-solaris2-sparc.sh

			と入力し、適当に質問に答えていけばOKです。
			JDK1.0.2の場合は、圧縮を自分で展開する必要があります。

            $ zcat JDK-1_0_2-solaris2-sparc.tar.Z > jdk.tar

            などとすれば、tar形式のファイルになりますので、さらに

            $ tar xvf jdk.tar

            として、展開してください。同じディレクトリに、javaという名前
            の 新しいディレクトリができます。

         2. マニュアルをCD-ROMから移す

            マニュアル類はJDKの本体と同じくらい重要です。 マニュアル類
            は、普通のHTMLファイルですので、機種を選びません。どの 機種、
            OSでも、同じように見ることができます。 マニュアルは、以下のも
            のがCD-ROMに収録されています。
            あなたの環境にあった圧縮形式を選んでインストールしてくださ
            い。
                + jdk1.1-beta2-docs.html.tar.Z
                + JDK-1_0_2-apidocs.tar.Z
                + JDK-1_0_2-apidocs.zip
               CD-ROMを使えないかたは、

               ftp://ftp.javasoft.com/docs/

               というディレクトリに、ほぼすべての英語版のマニュアルがありま
               すので、 ダウンロードしてください。(日本語版は、現在は、
               JDK1.0.2用のものしかありません。) 圧縮を展開する際には、たく
               さんのhtmlファイルなどができてしまいますので、 新しいディレク
               トリを作ってそこに移してから解凍するようにした ほうがよいでし
               ょう。

            3. 環境を設定する

               ファイルを置いただけではまだ使えませんので、環境変数CLASSPATH
               と、 シェル変数pathを、次の ようにして設定します。この例で
               は、javaという新しいディレクトリ は、/home/ringo/java/という
               場所に作成されたとします。
               tcshの場合

               $ setenv CLASSPATH=/home/ringo/java/classes:./
               $ set path= ( $path /home/ringo/java/bin )

               毎回このように設定しなおすのは面倒ですから、 自動的に実行され
               る設定ファイル ".cshrc"の最後の行にでも、以上のコマンドラインを
				書きくわえておいて下さい。これは使用する シェルによって違います
               ので、注意が必要です。上で示したのは、csh系 のシェルの場合
               で、それ以外のものについては、manなどで調べてください。
               あなたが使っているUNIXシステムのユーザ全員が使えるようにする
               には、 通常は、/usr/local/javaや、/opt/java などの場所にイン
               ストールする必要がありますが、そのためには スーパーユーザの権
               限が必要ですので、システムの管理者に尋ねてくだ さい。
               これでインストールは終了しました。 ログインしなおしてから、コ
               マンドラインから appletviewer を実行してみてください。

               No input files specified.
               use: appletviewer [-debug] url|file ...

               以上のようなエラーメッセージが出れば、インストール完了です。

            4. テキストファイルを作るには

               何らかのエディタがあればOKです。 筆者は通常
               UNIXシステム上でアプレットを作成していますが、その際には mule
               という、多機能なエディタを使用しています。 入力モードがいろい
               ろとあるのですが、Javaモードを使って、入力 しやすいようにして
               います。muleは大規模なシステム ですので、インストールするに
               は、管理者におねだりするのがよい と思います。
				ここでは、最初に示したsample.javaを、エディタを使って入力
			   してください。カレントワーキングディレクトリに、sample.javaという
				ファイルができあがれば、成功です。

            5. コンパイルするには

               コマンドラインから、

               $ javac sample.java

               というように指定します。これでエラーがなければ、sample.classが
				カレントディレクトリに出力されます。
				ここまでできたら、今度は、最初に示した、test.htmlを入力して、
				sample.classと同じディレクトリに置きます。

			6.
				ここまでできたら、コマンドラインから、

			   $ appletviewer test.html

               と入力してください。test.htmlには、sample.classを読みこんで、
               200×200ドットの大きさで実行せよ、という意味になっています。 

				何秒か待って無事に実行結果のようなウインドウが出現すれば、
				インストールは終わりです。おつかれさまでした。



        o その他のUNIX

			その他のUNIXには、Sun以外の手によって移植が進めらています。
			しかし種類があまりにも多いため、ここでは説明することができません。
			OSごとの移植状況は、

			http://www.webcity.co.jp/info/andoh/java/javafaq.html

			で知ることができますので、そこからそれぞれの移植サイトの
			ホームページなどで自分で調べてみてください。付録のCD-ROMには、
			このようにして得られたJDKのファイルを収録していますが、
			それらはもちろん最新ではないかもしれません。ダウンロードに登録
			が必要なものは、もちろん収録していません。



3.3 ゲーム製作はプログラマだけではできない！

     ソフトの開発には、プログラムをする、絵(画像)を作る、音を作る、など、さ
     まざまな 種類の作業が必要です。それぞれのことをするためのソフトウェア
     が、私たちのパソコン用に 発売あるいは配布されています。本書のCD-ROMに、
     そのためのソフトウェアをひととおり 用意していますが、さらに新しいものが
     どんどん出てくることは確実です。せっかく インターネットがあるのですか
     ら、よさそうなソフトがあれば、どんどんダウンロード してみましょう。役に
     たつサイトを、付録「関連情報」に集めてみました。



  4. プログラミング言語をマスターするコツ

     筆者はいつも、初心者から中級者まで(私自身が上級でないので、中級の人まで
     しか教えられません)いろんな人にプログラミングを教えていますが、 飲みこ
     みの速さ、マスターするまでの期間は本当にまちまちです。まあ速ければ いい
     というわけではありませんが、速いということに意味はあると思います。 プロ
     グラミング言語をマスターできるかどうかは、頭の良し悪しとは全然関係があ
     りません。 筆者の経験によると、最も重要な要素は、何か、やりたいことが明
     確である ということです。医学的にも、自分の興味あることに取りくんでいる
     時は記憶に入る 効率が飛躍的に高まっているそうですから、このことは、当然
     のことなのかもしれません。 我がクラブにも、コンピューターに興味を持って
     入部してくる初心者がたくさんいます。 最初からいきなりかなりの知識を持っ
     ているようなパワフルな部員もいるけれど、 ほとんどは初心者です。私も、入
     部したてのころは、C言語を少し触ったことがある 程度でした。現在私のプロ
     ジェクトでバリバリプログラムしているtaka君も、今年 入部するまでは、パソ
     コンのキーボードには触ったことがありませんでした。かと 思えば、大学4年
     間クラブにいながら、「プログラム覚えたい〜」と言いつつ 結局プログラミン
     グ言語を一つもマスターできなかった人もいます。taka君が頭が よくて、でき
     なかった人が頭が悪い、というのではありません。ただ一つの原因は、 「意
     志」です。taka君は、私がプロジェクトに誘っていろいろプログラムの仕事を
     振ると、 その仕事について興味を持って自分から行動していましたし、プロジ
     ェクト以外の事に ついても手を広げはじめました。当然分らないことがどんど
     ん出てきます。そういう 時は先輩を質問責めにしていました。
     このように、やる気さえあればプログラミング言語なんてどうにでもなるもの
     です。

#図3.4-1<NOT YET>   taka君にプログラムを教える筆者(教わってるとも言う)


